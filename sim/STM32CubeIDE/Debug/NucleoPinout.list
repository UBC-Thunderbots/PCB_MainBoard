
NucleoPinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007810  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ab8  08007ab8  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08007ab8  08007ab8  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ab8  08007ab8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab8  08007ab8  00017ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007abc  08007abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007ac0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08007ad0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08007b30  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000414  240000d0  08007b90  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  240004e4  08007b90  000204e4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024cb8  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003135  00000000  00000000  00044db6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001718  00000000  00000000  00047ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000015f0  00000000  00000000  00049608  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003943e  00000000  00000000  0004abf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00011e9a  00000000  00000000  00084036  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00176f74  00000000  00000000  00095ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  0020ce44  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000064b0  00000000  00000000  0020cec0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007a90 	.word	0x08007a90

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08007a90 	.word	0x08007a90

080002d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80002e0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <SCB_EnableICache+0x3c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80002ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80002f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <SCB_EnableICache+0x3c>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a06      	ldr	r2, [pc, #24]	; (8000314 <SCB_EnableICache+0x3c>)
 80002fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000304:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000ed00 	.word	0xe000ed00

08000318 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800031e:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <SCB_EnableDCache+0x7c>)
 8000320:	2200      	movs	r2, #0
 8000322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000326:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <SCB_EnableDCache+0x7c>)
 800032c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000330:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	0b5b      	lsrs	r3, r3, #13
 8000336:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800033a:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	08db      	lsrs	r3, r3, #3
 8000340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000344:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	015a      	lsls	r2, r3, #5
 800034a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800034e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000350:	68ba      	ldr	r2, [r7, #8]
 8000352:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000354:	490f      	ldr	r1, [pc, #60]	; (8000394 <SCB_EnableDCache+0x7c>)
 8000356:	4313      	orrs	r3, r2
 8000358:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	1e5a      	subs	r2, r3, #1
 8000360:	60ba      	str	r2, [r7, #8]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1ef      	bne.n	8000346 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	1e5a      	subs	r2, r3, #1
 800036a:	60fa      	str	r2, [r7, #12]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d1e5      	bne.n	800033c <SCB_EnableDCache+0x24>
 8000370:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <SCB_EnableDCache+0x7c>)
 8000376:	695b      	ldr	r3, [r3, #20]
 8000378:	4a06      	ldr	r2, [pc, #24]	; (8000394 <SCB_EnableDCache+0x7c>)
 800037a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800037e:	6153      	str	r3, [r2, #20]
 8000380:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000384:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000388:	bf00      	nop
 800038a:	3714      	adds	r7, #20
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	e000ed00 	.word	0xe000ed00

08000398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */
  

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800039c:	f7ff ff9c 	bl	80002d8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80003a0:	f7ff ffba 	bl	8000318 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f001 fbc6 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a8:	f000 f852 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ac:	f000 fda2 	bl	8000ef4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003b0:	f000 f934 	bl	800061c <MX_ADC1_Init>
  MX_ADC2_Init();
 80003b4:	f000 f9a8 	bl	8000708 <MX_ADC2_Init>
  MX_ADC3_Init();
 80003b8:	f000 fa0a 	bl	80007d0 <MX_ADC3_Init>
  MX_ETH_Init();
 80003bc:	f000 fa6c 	bl	8000898 <MX_ETH_Init>
  MX_I2C1_Init();
 80003c0:	f000 fabc 	bl	800093c <MX_I2C1_Init>
  MX_I2C2_Init();
 80003c4:	f000 fafa 	bl	80009bc <MX_I2C2_Init>
  MX_SPI1_Init();
 80003c8:	f000 fb38 	bl	8000a3c <MX_SPI1_Init>
  MX_TIM2_Init();
 80003cc:	f000 fb8a 	bl	8000ae4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003d0:	f000 fc0e 	bl	8000bf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80003d4:	f000 fc90 	bl	8000cf8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80003d8:	f000 fd16 	bl	8000e08 <MX_TIM5_Init>
  // HAL_TIM_PWM_Init(&htim2);
  //if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  //  {
  //    Error_Handler();
  //  }
  if (HAL_TIM_Base_Start(&htim2) != HAL_OK) {
 80003dc:	481a      	ldr	r0, [pc, #104]	; (8000448 <main+0xb0>)
 80003de:	f006 fbd7 	bl	8006b90 <HAL_TIM_Base_Start>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <main+0x54>
	  Error_Handler();
 80003e8:	f000 fee4 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1) != HAL_OK) {
 80003ec:	2100      	movs	r1, #0
 80003ee:	4816      	ldr	r0, [pc, #88]	; (8000448 <main+0xb0>)
 80003f0:	f006 fc2e 	bl	8006c50 <HAL_TIM_PWM_Start>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <main+0x66>
	  // Error Starting PWM
	  Error_Handler();
 80003fa:	f000 fedb 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3) != HAL_OK) {
 80003fe:	2108      	movs	r1, #8
 8000400:	4811      	ldr	r0, [pc, #68]	; (8000448 <main+0xb0>)
 8000402:	f006 fc25 	bl	8006c50 <HAL_TIM_PWM_Start>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <main+0x78>
  	  // Error Starting PWM
  	  Error_Handler();
 800040c:	f000 fed2 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_Base_Start(&htim4) != HAL_OK) {
 8000410:	480e      	ldr	r0, [pc, #56]	; (800044c <main+0xb4>)
 8000412:	f006 fbbd 	bl	8006b90 <HAL_TIM_Base_Start>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <main+0x88>
  	  Error_Handler();
 800041c:	f000 feca 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1) != HAL_OK) {
 8000420:	2100      	movs	r1, #0
 8000422:	480a      	ldr	r0, [pc, #40]	; (800044c <main+0xb4>)
 8000424:	f006 fc14 	bl	8006c50 <HAL_TIM_PWM_Start>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <main+0x9a>
	  // Error Starting PWM
	  Error_Handler();
 800042e:	f000 fec1 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) != HAL_OK) {
 8000432:	2104      	movs	r1, #4
 8000434:	4805      	ldr	r0, [pc, #20]	; (800044c <main+0xb4>)
 8000436:	f006 fc0b 	bl	8006c50 <HAL_TIM_PWM_Start>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <main+0xac>
	  // Error Starting PWM
	  Error_Handler();
 8000440:	f000 feb8 	bl	80011b4 <Error_Handler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000444:	e7fe      	b.n	8000444 <main+0xac>
 8000446:	bf00      	nop
 8000448:	240003fc 	.word	0x240003fc
 800044c:	240000f0 	.word	0x240000f0

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b0cc      	sub	sp, #304	; 0x130
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800045a:	224c      	movs	r2, #76	; 0x4c
 800045c:	2100      	movs	r1, #0
 800045e:	4618      	mov	r0, r3
 8000460:	f007 fb0e 	bl	8007a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000464:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000468:	2220      	movs	r2, #32
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f007 fb07 	bl	8007a80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000472:	f107 0308 	add.w	r3, r7, #8
 8000476:	4618      	mov	r0, r3
 8000478:	23bc      	movs	r3, #188	; 0xbc
 800047a:	461a      	mov	r2, r3
 800047c:	2100      	movs	r1, #0
 800047e:	f007 faff 	bl	8007a80 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000482:	2002      	movs	r0, #2
 8000484:	f003 fc32 	bl	8003cec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	4b5f      	ldr	r3, [pc, #380]	; (800060c <SystemClock_Config+0x1bc>)
 8000490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000492:	4a5e      	ldr	r2, [pc, #376]	; (800060c <SystemClock_Config+0x1bc>)
 8000494:	f023 0301 	bic.w	r3, r3, #1
 8000498:	62d3      	str	r3, [r2, #44]	; 0x2c
 800049a:	4b5c      	ldr	r3, [pc, #368]	; (800060c <SystemClock_Config+0x1bc>)
 800049c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800049e:	f003 0201 	and.w	r2, r3, #1
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	4b5a      	ldr	r3, [pc, #360]	; (8000610 <SystemClock_Config+0x1c0>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004ae:	4a58      	ldr	r2, [pc, #352]	; (8000610 <SystemClock_Config+0x1c0>)
 80004b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b56      	ldr	r3, [pc, #344]	; (8000610 <SystemClock_Config+0x1c0>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004c6:	bf00      	nop
 80004c8:	4b51      	ldr	r3, [pc, #324]	; (8000610 <SystemClock_Config+0x1c0>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d4:	d1f8      	bne.n	80004c8 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source 
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80004d6:	4b4f      	ldr	r3, [pc, #316]	; (8000614 <SystemClock_Config+0x1c4>)
 80004d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004da:	4a4e      	ldr	r2, [pc, #312]	; (8000614 <SystemClock_Config+0x1c4>)
 80004dc:	f023 0303 	bic.w	r3, r3, #3
 80004e0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e2:	2302      	movs	r3, #2
 80004e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ee:	2340      	movs	r3, #64	; 0x40
 80004f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f4:	2302      	movs	r3, #2
 80004f6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004fa:	2300      	movs	r3, #0
 80004fc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 32;
 8000500:	2320      	movs	r3, #32
 8000502:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 129;
 8000506:	2381      	movs	r3, #129	; 0x81
 8000508:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800050c:	2302      	movs	r3, #2
 800050e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000512:	2302      	movs	r3, #2
 8000514:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000518:	2302      	movs	r3, #2
 800051a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800051e:	2304      	movs	r3, #4
 8000520:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000524:	2300      	movs	r3, #0
 8000526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000534:	4618      	mov	r0, r3
 8000536:	f003 fc13 	bl	8003d60 <HAL_RCC_OscConfig>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000540:	f000 fe38 	bl	80011b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	233f      	movs	r3, #63	; 0x3f
 8000546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054a:	2300      	movs	r3, #0
 800054c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000556:	2300      	movs	r3, #0
 8000558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000574:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 ffc8 	bl	8004510 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x13a>
  {
    Error_Handler();
 8000586:	f000 fe15 	bl	80011b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_I2C2
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	4a22      	ldr	r2, [pc, #136]	; (8000618 <SystemClock_Config+0x1c8>)
 8000590:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	2220      	movs	r2, #32
 8000598:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 129;
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	2281      	movs	r2, #129	; 0x81
 80005a0:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	2202      	movs	r2, #2
 80005a8:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	2202      	movs	r2, #2
 80005b0:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80005b2:	f107 0308 	add.w	r3, r7, #8
 80005b6:	2202      	movs	r2, #2
 80005b8:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2240      	movs	r2, #64	; 0x40
 80005c0:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	2200      	movs	r2, #0
 80005d0:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	2200      	movs	r2, #0
 80005d8:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80005da:	f107 0308 	add.w	r3, r7, #8
 80005de:	2200      	movs	r2, #0
 80005e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fabe 	bl	8004b74 <HAL_RCCEx_PeriphCLKConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x1b2>
  {
    Error_Handler();
 80005fe:	f000 fdd9 	bl	80011b4 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	58000400 	.word	0x58000400
 8000610:	58024800 	.word	0x58024800
 8000614:	58024400 	.word	0x58024400
 8000618:	00081008 	.word	0x00081008

0800061c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]
 800063c:	615a      	str	r2, [r3, #20]
 800063e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000640:	4b2e      	ldr	r3, [pc, #184]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000642:	4a2f      	ldr	r2, [pc, #188]	; (8000700 <MX_ADC1_Init+0xe4>)
 8000644:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800064c:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000652:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <MX_ADC1_Init+0xe0>)
 800065a:	2204      	movs	r2, #4
 800065c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800065e:	4b27      	ldr	r3, [pc, #156]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000660:	2200      	movs	r2, #0
 8000662:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000664:	4b25      	ldr	r3, [pc, #148]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000666:	2200      	movs	r2, #0
 8000668:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800066a:	4b24      	ldr	r3, [pc, #144]	; (80006fc <MX_ADC1_Init+0xe0>)
 800066c:	2201      	movs	r2, #1
 800066e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000678:	2200      	movs	r2, #0
 800067a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067c:	4b1f      	ldr	r3, [pc, #124]	; (80006fc <MX_ADC1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000684:	2200      	movs	r2, #0
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <MX_ADC1_Init+0xe0>)
 800068a:	2200      	movs	r2, #0
 800068c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000690:	2200      	movs	r2, #0
 8000692:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_ADC1_Init+0xe0>)
 8000696:	2200      	movs	r2, #0
 8000698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	4817      	ldr	r0, [pc, #92]	; (80006fc <MX_ADC1_Init+0xe0>)
 800069e:	f001 fc8d 	bl	8001fbc <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006a8:	f000 fd84 	bl	80011b4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	4811      	ldr	r0, [pc, #68]	; (80006fc <MX_ADC1_Init+0xe0>)
 80006b8:	f002 fa52 	bl	8002b60 <HAL_ADCEx_MultiModeConfigChannel>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006c2:	f000 fd77 	bl	80011b4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_ADC1_Init+0xe8>)
 80006c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ca:	2306      	movs	r3, #6
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006d6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006d8:	2304      	movs	r3, #4
 80006da:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_ADC1_Init+0xe0>)
 80006e6:	f001 fe09 	bl	80022fc <HAL_ADC_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006f0:	f000 fd60 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	240002ac 	.word	0x240002ac
 8000700:	40022000 	.word	0x40022000
 8000704:	08600004 	.word	0x08600004

08000708 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 8000720:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <MX_ADC2_Init+0xbc>)
 8000722:	4a29      	ldr	r2, [pc, #164]	; (80007c8 <MX_ADC2_Init+0xc0>)
 8000724:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_ADC2_Init+0xbc>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800072c:	4b25      	ldr	r3, [pc, #148]	; (80007c4 <MX_ADC2_Init+0xbc>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <MX_ADC2_Init+0xbc>)
 8000734:	2200      	movs	r2, #0
 8000736:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000738:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_ADC2_Init+0xbc>)
 800073a:	2204      	movs	r2, #4
 800073c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_ADC2_Init+0xbc>)
 8000740:	2200      	movs	r2, #0
 8000742:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000744:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_ADC2_Init+0xbc>)
 8000746:	2200      	movs	r2, #0
 8000748:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_ADC2_Init+0xbc>)
 800074c:	2201      	movs	r2, #1
 800074e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000750:	4b1c      	ldr	r3, [pc, #112]	; (80007c4 <MX_ADC2_Init+0xbc>)
 8000752:	2200      	movs	r2, #0
 8000754:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_ADC2_Init+0xbc>)
 8000758:	2200      	movs	r2, #0
 800075a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_ADC2_Init+0xbc>)
 800075e:	2200      	movs	r2, #0
 8000760:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_ADC2_Init+0xbc>)
 8000764:	2200      	movs	r2, #0
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_ADC2_Init+0xbc>)
 800076a:	2200      	movs	r2, #0
 800076c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_ADC2_Init+0xbc>)
 8000770:	2200      	movs	r2, #0
 8000772:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_ADC2_Init+0xbc>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800077c:	4811      	ldr	r0, [pc, #68]	; (80007c4 <MX_ADC2_Init+0xbc>)
 800077e:	f001 fc1d 	bl	8001fbc <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000788:	f000 fd14 	bl	80011b4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC2_Init+0xc4>)
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000790:	2306      	movs	r3, #6
 8000792:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000798:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800079c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079e:	2304      	movs	r3, #4
 80007a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_ADC2_Init+0xbc>)
 80007ac:	f001 fda6 	bl	80022fc <HAL_ADC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80007b6:	f000 fcfd 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3720      	adds	r7, #32
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	24000130 	.word	0x24000130
 80007c8:	40022100 	.word	0x40022100
 80007cc:	08600004 	.word	0x08600004

080007d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
 80007e4:	615a      	str	r2, [r3, #20]
 80007e6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_ADC3_Init+0xbc>)
 80007ea:	4a29      	ldr	r2, [pc, #164]	; (8000890 <MX_ADC3_Init+0xc0>)
 80007ec:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ee:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_ADC3_Init+0xbc>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_ADC3_Init+0xbc>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fa:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_ADC3_Init+0xbc>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_ADC3_Init+0xbc>)
 8000802:	2204      	movs	r2, #4
 8000804:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000806:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_ADC3_Init+0xbc>)
 8000808:	2200      	movs	r2, #0
 800080a:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ADC3_Init+0xbc>)
 800080e:	2200      	movs	r2, #0
 8000810:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ADC3_Init+0xbc>)
 8000814:	2201      	movs	r2, #1
 8000816:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_ADC3_Init+0xbc>)
 800081a:	2200      	movs	r2, #0
 800081c:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ADC3_Init+0xbc>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_ADC3_Init+0xbc>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_ADC3_Init+0xbc>)
 800082c:	2200      	movs	r2, #0
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000830:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_ADC3_Init+0xbc>)
 8000832:	2200      	movs	r2, #0
 8000834:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_ADC3_Init+0xbc>)
 8000838:	2200      	movs	r2, #0
 800083a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800083c:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_ADC3_Init+0xbc>)
 800083e:	2200      	movs	r2, #0
 8000840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000844:	4811      	ldr	r0, [pc, #68]	; (800088c <MX_ADC3_Init+0xbc>)
 8000846:	f001 fbb9 	bl	8001fbc <HAL_ADC_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000850:	f000 fcb0 	bl	80011b4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_ADC3_Init+0xc4>)
 8000856:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000858:	2306      	movs	r3, #6
 800085a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000860:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000864:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000866:	2304      	movs	r3, #4
 8000868:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	4806      	ldr	r0, [pc, #24]	; (800088c <MX_ADC3_Init+0xbc>)
 8000874:	f001 fd42 	bl	80022fc <HAL_ADC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800087e:	f000 fc99 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	24000310 	.word	0x24000310
 8000890:	58026000 	.word	0x58026000
 8000894:	04300002 	.word	0x04300002

08000898 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_ETH_Init+0x90>)
 800089e:	4a23      	ldr	r2, [pc, #140]	; (800092c <MX_ETH_Init+0x94>)
 80008a0:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_ETH_Init+0x90>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_ETH_Init+0x90>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	3301      	adds	r3, #1
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_ETH_Init+0x90>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	3302      	adds	r3, #2
 80008ba:	22e1      	movs	r2, #225	; 0xe1
 80008bc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_ETH_Init+0x90>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	3303      	adds	r3, #3
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_ETH_Init+0x90>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	3304      	adds	r3, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_ETH_Init+0x90>)
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	3305      	adds	r3, #5
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_ETH_Init+0x90>)
 80008de:	2201      	movs	r2, #1
 80008e0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_ETH_Init+0x90>)
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <MX_ETH_Init+0x98>)
 80008e6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_ETH_Init+0x90>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <MX_ETH_Init+0x9c>)
 80008ec:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_ETH_Init+0x90>)
 80008f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008f4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f6:	480c      	ldr	r0, [pc, #48]	; (8000928 <MX_ETH_Init+0x90>)
 80008f8:	f002 faf0 	bl	8002edc <HAL_ETH_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000902:	f000 fc57 	bl	80011b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000906:	2234      	movs	r2, #52	; 0x34
 8000908:	2100      	movs	r1, #0
 800090a:	480b      	ldr	r0, [pc, #44]	; (8000938 <MX_ETH_Init+0xa0>)
 800090c:	f007 f8b8 	bl	8007a80 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_ETH_Init+0xa0>)
 8000912:	2221      	movs	r2, #33	; 0x21
 8000914:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_ETH_Init+0xa0>)
 8000918:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800091c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_ETH_Init+0xa0>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2400043c 	.word	0x2400043c
 800092c:	40028000 	.word	0x40028000
 8000930:	24000070 	.word	0x24000070
 8000934:	24000010 	.word	0x24000010
 8000938:	240004ac 	.word	0x240004ac

0800093c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000942:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MX_I2C1_Init+0x78>)
 8000944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <MX_I2C1_Init+0x7c>)
 800094a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000954:	2201      	movs	r2, #1
 8000956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_I2C1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000970:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <MX_I2C1_Init+0x74>)
 8000978:	f003 f890 	bl	8003a9c <HAL_I2C_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000982:	f000 fc17 	bl	80011b4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000986:	2100      	movs	r1, #0
 8000988:	4809      	ldr	r0, [pc, #36]	; (80009b0 <MX_I2C1_Init+0x74>)
 800098a:	f003 f917 	bl	8003bbc <HAL_I2CEx_ConfigAnalogFilter>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000994:	f000 fc0e 	bl	80011b4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_I2C1_Init+0x74>)
 800099c:	f003 f959 	bl	8003c52 <HAL_I2CEx_ConfigDigitalFilter>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009a6:	f000 fc05 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	24000194 	.word	0x24000194
 80009b4:	40005400 	.word	0x40005400
 80009b8:	10707dbc 	.word	0x10707dbc

080009bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_I2C2_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <MX_I2C2_Init+0x7c>)
 80009ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009cc:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009f6:	480e      	ldr	r0, [pc, #56]	; (8000a30 <MX_I2C2_Init+0x74>)
 80009f8:	f003 f850 	bl	8003a9c <HAL_I2C_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a02:	f000 fbd7 	bl	80011b4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a06:	2100      	movs	r1, #0
 8000a08:	4809      	ldr	r0, [pc, #36]	; (8000a30 <MX_I2C2_Init+0x74>)
 8000a0a:	f003 f8d7 	bl	8003bbc <HAL_I2CEx_ConfigAnalogFilter>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a14:	f000 fbce 	bl	80011b4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <MX_I2C2_Init+0x74>)
 8000a1c:	f003 f919 	bl	8003c52 <HAL_I2CEx_ConfigDigitalFilter>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a26:	f000 fbc5 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	240001e0 	.word	0x240001e0
 8000a34:	40005800 	.word	0x40005800
 8000a38:	10707dbc 	.word	0x10707dbc

08000a3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a42:	4a27      	ldr	r2, [pc, #156]	; (8000ae0 <MX_SPI1_Init+0xa4>)
 8000a44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b23      	ldr	r3, [pc, #140]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a54:	4b21      	ldr	r3, [pc, #132]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a56:	2203      	movs	r2, #3
 8000a58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5a:	4b20      	ldr	r3, [pc, #128]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a60:	4b1e      	ldr	r3, [pc, #120]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a66:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a78:	4b18      	ldr	r3, [pc, #96]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a8a:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a90:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a98:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aa4:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000abc:	4b07      	ldr	r3, [pc, #28]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	; (8000adc <MX_SPI1_Init+0xa0>)
 8000aca:	f005 ff23 	bl	8006914 <HAL_SPI_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_SPI1_Init+0x9c>
  {
    Error_Handler();
 8000ad4:	f000 fb6e 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	24000374 	.word	0x24000374
 8000ae0:	40013000 	.word	0x40013000

08000ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	; 0x38
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b04:	463b      	mov	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b16:	4b35      	ldr	r3, [pc, #212]	; (8000bec <MX_TIM2_Init+0x108>)
 8000b18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000;
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <MX_TIM2_Init+0x108>)
 8000b20:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b26:	4b31      	ldr	r3, [pc, #196]	; (8000bec <MX_TIM2_Init+0x108>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000;
 8000b2c:	4b2f      	ldr	r3, [pc, #188]	; (8000bec <MX_TIM2_Init+0x108>)
 8000b2e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000b32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b34:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <MX_TIM2_Init+0x108>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <MX_TIM2_Init+0x108>)
 8000b3c:	2280      	movs	r2, #128	; 0x80
 8000b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b40:	482a      	ldr	r0, [pc, #168]	; (8000bec <MX_TIM2_Init+0x108>)
 8000b42:	f005 fffa 	bl	8006b3a <HAL_TIM_Base_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000b4c:	f000 fb32 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4823      	ldr	r0, [pc, #140]	; (8000bec <MX_TIM2_Init+0x108>)
 8000b5e:	f006 f9e7 	bl	8006f30 <HAL_TIM_ConfigClockSource>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000b68:	f000 fb24 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b6c:	481f      	ldr	r0, [pc, #124]	; (8000bec <MX_TIM2_Init+0x108>)
 8000b6e:	f006 f839 	bl	8006be4 <HAL_TIM_PWM_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b78:	f000 fb1c 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4818      	ldr	r0, [pc, #96]	; (8000bec <MX_TIM2_Init+0x108>)
 8000b8c:	f006 fecc 	bl	8007928 <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b96:	f000 fb0d 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9a:	2360      	movs	r3, #96	; 0x60
 8000b9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8000;
 8000b9e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000ba2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480e      	ldr	r0, [pc, #56]	; (8000bec <MX_TIM2_Init+0x108>)
 8000bb4:	f006 f8a4 	bl	8006d00 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8000bbe:	f000 faf9 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.Pulse = 6000;
 8000bc2:	f241 7370 	movw	r3, #6000	; 0x1770
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2208      	movs	r2, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4807      	ldr	r0, [pc, #28]	; (8000bec <MX_TIM2_Init+0x108>)
 8000bd0:	f006 f896 	bl	8006d00 <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 8000bda:	f000 faeb 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bde:	4803      	ldr	r0, [pc, #12]	; (8000bec <MX_TIM2_Init+0x108>)
 8000be0:	f000 fe1a 	bl	8001818 <HAL_TIM_MspPostInit>

}
 8000be4:	bf00      	nop
 8000be6:	3738      	adds	r7, #56	; 0x38
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	240003fc 	.word	0x240003fc

08000bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	; 0x38
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000c24:	4a33      	ldr	r2, [pc, #204]	; (8000cf4 <MX_TIM3_Init+0x104>)
 8000c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2000;
 8000c28:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000c2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b2f      	ldr	r3, [pc, #188]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 32000;
 8000c36:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000c38:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000c3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c4a:	4829      	ldr	r0, [pc, #164]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000c4c:	f005 ff75 	bl	8006b3a <HAL_TIM_Base_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000c56:	f000 faad 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4822      	ldr	r0, [pc, #136]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000c68:	f006 f962 	bl	8006f30 <HAL_TIM_ConfigClockSource>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c72:	f000 fa9f 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c76:	481e      	ldr	r0, [pc, #120]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000c78:	f005 ffb4 	bl	8006be4 <HAL_TIM_PWM_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c82:	f000 fa97 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4816      	ldr	r0, [pc, #88]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000c96:	f006 fe47 	bl	8007928 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000ca0:	f000 fa88 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca4:	2360      	movs	r3, #96	; 0x60
 8000ca6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000;
 8000ca8:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000cac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000cbe:	f006 f81f 	bl	8006d00 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8000cc8:	f000 fa74 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ccc:	463b      	mov	r3, r7
 8000cce:	2204      	movs	r2, #4
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000cd4:	f006 f814 	bl	8006d00 <HAL_TIM_PWM_ConfigChannel>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM3_Init+0xf2>
  {
    Error_Handler();
 8000cde:	f000 fa69 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ce2:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <MX_TIM3_Init+0x100>)
 8000ce4:	f000 fd98 	bl	8001818 <HAL_TIM_MspPostInit>

}
 8000ce8:	bf00      	nop
 8000cea:	3738      	adds	r7, #56	; 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	2400026c 	.word	0x2400026c
 8000cf4:	40000400 	.word	0x40000400

08000cf8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d18:	463b      	mov	r3, r7
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d2a:	4b35      	ldr	r3, [pc, #212]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000d2c:	4a35      	ldr	r2, [pc, #212]	; (8000e04 <MX_TIM4_Init+0x10c>)
 8000d2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000;
 8000d30:	4b33      	ldr	r3, [pc, #204]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000d32:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 32000;
 8000d3e:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000d40:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000d44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d46:	4b2e      	ldr	r3, [pc, #184]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4c:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d52:	482b      	ldr	r0, [pc, #172]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000d54:	f005 fef1 	bl	8006b3a <HAL_TIM_Base_Init>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000d5e:	f000 fa29 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4824      	ldr	r0, [pc, #144]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000d70:	f006 f8de 	bl	8006f30 <HAL_TIM_ConfigClockSource>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000d7a:	f000 fa1b 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d7e:	4820      	ldr	r0, [pc, #128]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000d80:	f005 ff30 	bl	8006be4 <HAL_TIM_PWM_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000d8a:	f000 fa13 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d96:	f107 031c 	add.w	r3, r7, #28
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4818      	ldr	r0, [pc, #96]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000d9e:	f006 fdc3 	bl	8007928 <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000da8:	f000 fa04 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dac:	2360      	movs	r3, #96	; 0x60
 8000dae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000;
 8000db0:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000db4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480e      	ldr	r0, [pc, #56]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000dc6:	f005 ff9b 	bl	8006d00 <HAL_TIM_PWM_ConfigChannel>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000dd0:	f000 f9f0 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.Pulse = 8000;
 8000dd4:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8000dd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2204      	movs	r2, #4
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000de2:	f005 ff8d 	bl	8006d00 <HAL_TIM_PWM_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM4_Init+0xf8>
  {
    Error_Handler();
 8000dec:	f000 f9e2 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <MX_TIM4_Init+0x108>)
 8000df2:	f000 fd11 	bl	8001818 <HAL_TIM_MspPostInit>

}
 8000df6:	bf00      	nop
 8000df8:	3738      	adds	r7, #56	; 0x38
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	240000f0 	.word	0x240000f0
 8000e04:	40000800 	.word	0x40000800

08000e08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	; 0x38
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]
 8000e36:	615a      	str	r2, [r3, #20]
 8000e38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000e3c:	4a2c      	ldr	r2, [pc, #176]	; (8000ef0 <MX_TIM5_Init+0xe8>)
 8000e3e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e40:	4b2a      	ldr	r3, [pc, #168]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b29      	ldr	r3, [pc, #164]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8000e4c:	4b27      	ldr	r3, [pc, #156]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e52:	4b26      	ldr	r3, [pc, #152]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e5e:	4823      	ldr	r0, [pc, #140]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000e60:	f005 fe6b 	bl	8006b3a <HAL_TIM_Base_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000e6a:	f000 f9a3 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	481c      	ldr	r0, [pc, #112]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000e7c:	f006 f858 	bl	8006f30 <HAL_TIM_ConfigClockSource>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000e86:	f000 f995 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e8a:	4818      	ldr	r0, [pc, #96]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000e8c:	f005 feaa 	bl	8006be4 <HAL_TIM_PWM_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000e96:	f000 f98d 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4810      	ldr	r0, [pc, #64]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000eaa:	f006 fd3d 	bl	8007928 <HAL_TIMEx_MasterConfigSynchronization>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000eb4:	f000 f97e 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb8:	2360      	movs	r3, #96	; 0x60
 8000eba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec8:	463b      	mov	r3, r7
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000ed0:	f005 ff16 	bl	8006d00 <HAL_TIM_PWM_ConfigChannel>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000eda:	f000 f96b 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ede:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM5_Init+0xe4>)
 8000ee0:	f000 fc9a 	bl	8001818 <HAL_TIM_MspPostInit>

}
 8000ee4:	bf00      	nop
 8000ee6:	3738      	adds	r7, #56	; 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2400022c 	.word	0x2400022c
 8000ef0:	40000c00 	.word	0x40000c00

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	; 0x38
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	4ba3      	ldr	r3, [pc, #652]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	4aa1      	ldr	r2, [pc, #644]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f12:	f043 0304 	orr.w	r3, r3, #4
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1a:	4b9f      	ldr	r3, [pc, #636]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	623b      	str	r3, [r7, #32]
 8000f26:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f28:	4b9b      	ldr	r3, [pc, #620]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	4a9a      	ldr	r2, [pc, #616]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f30:	f043 0320 	orr.w	r3, r3, #32
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f38:	4b97      	ldr	r3, [pc, #604]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	f003 0320 	and.w	r3, r3, #32
 8000f42:	61fb      	str	r3, [r7, #28]
 8000f44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f46:	4b94      	ldr	r3, [pc, #592]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	4a92      	ldr	r2, [pc, #584]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f56:	4b90      	ldr	r3, [pc, #576]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f64:	4b8c      	ldr	r3, [pc, #560]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6a:	4a8b      	ldr	r2, [pc, #556]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f74:	4b88      	ldr	r3, [pc, #544]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b85      	ldr	r3, [pc, #532]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a83      	ldr	r2, [pc, #524]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f92:	4b81      	ldr	r3, [pc, #516]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa0:	4b7d      	ldr	r3, [pc, #500]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa6:	4a7c      	ldr	r2, [pc, #496]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb0:	4b79      	ldr	r3, [pc, #484]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbe:	4b76      	ldr	r3, [pc, #472]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a74      	ldr	r2, [pc, #464]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b72      	ldr	r3, [pc, #456]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fdc:	4b6e      	ldr	r3, [pc, #440]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a6d      	ldr	r2, [pc, #436]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b6a      	ldr	r3, [pc, #424]	; (8001198 <MX_GPIO_Init+0x2a4>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f240 119b 	movw	r1, #411	; 0x19b
 8001000:	4866      	ldr	r0, [pc, #408]	; (800119c <MX_GPIO_Init+0x2a8>)
 8001002:	f002 fd31 	bl	8003a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_1, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f641 0182 	movw	r1, #6274	; 0x1882
 800100c:	4864      	ldr	r0, [pc, #400]	; (80011a0 <MX_GPIO_Init+0x2ac>)
 800100e:	f002 fd2b 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001018:	4862      	ldr	r0, [pc, #392]	; (80011a4 <MX_GPIO_Init+0x2b0>)
 800101a:	f002 fd25 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001024:	4860      	ldr	r0, [pc, #384]	; (80011a8 <MX_GPIO_Init+0x2b4>)
 8001026:	f002 fd1f 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001030:	485e      	ldr	r0, [pc, #376]	; (80011ac <MX_GPIO_Init+0x2b8>)
 8001032:	f002 fd19 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800103c:	485c      	ldr	r0, [pc, #368]	; (80011b0 <MX_GPIO_Init+0x2bc>)
 800103e:	f002 fd13 	bl	8003a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG0 PG1 PG3 PG4 
                           PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4 
 8001042:	f240 139b 	movw	r3, #411	; 0x19b
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4850      	ldr	r0, [pc, #320]	; (800119c <MX_GPIO_Init+0x2a8>)
 800105c:	f002 fb54 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE11 PE12 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_1;
 8001060:	f641 0382 	movw	r3, #6274	; 0x1882
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001066:	2301      	movs	r3, #1
 8001068:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001076:	4619      	mov	r1, r3
 8001078:	4849      	ldr	r0, [pc, #292]	; (80011a0 <MX_GPIO_Init+0x2ac>)
 800107a:	f002 fb45 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_13|GPIO_PIN_14;
 800107e:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001084:	2300      	movs	r3, #0
 8001086:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4843      	ldr	r0, [pc, #268]	; (80011a0 <MX_GPIO_Init+0x2ac>)
 8001094:	f002 fb38 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001098:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ae:	4619      	mov	r1, r3
 80010b0:	483c      	ldr	r0, [pc, #240]	; (80011a4 <MX_GPIO_Init+0x2b0>)
 80010b2:	f002 fb29 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	4619      	mov	r1, r3
 80010ca:	4836      	ldr	r0, [pc, #216]	; (80011a4 <MX_GPIO_Init+0x2b0>)
 80010cc:	f002 fb1c 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80010d0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	4830      	ldr	r0, [pc, #192]	; (80011a8 <MX_GPIO_Init+0x2b4>)
 80010e6:	f002 fb0f 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	4829      	ldr	r0, [pc, #164]	; (80011a8 <MX_GPIO_Init+0x2b4>)
 8001104:	f002 fb00 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001118:	4619      	mov	r1, r3
 800111a:	4820      	ldr	r0, [pc, #128]	; (800119c <MX_GPIO_Init+0x2a8>)
 800111c:	f002 faf4 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001120:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	4619      	mov	r1, r3
 8001134:	481e      	ldr	r0, [pc, #120]	; (80011b0 <MX_GPIO_Init+0x2bc>)
 8001136:	f002 fae7 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800113a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001150:	4619      	mov	r1, r3
 8001152:	4816      	ldr	r0, [pc, #88]	; (80011ac <MX_GPIO_Init+0x2b8>)
 8001154:	f002 fad8 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	480f      	ldr	r0, [pc, #60]	; (80011ac <MX_GPIO_Init+0x2b8>)
 800116e:	f002 facb 	bl	8003708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001172:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <MX_GPIO_Init+0x2bc>)
 800118c:	f002 fabc 	bl	8003708 <HAL_GPIO_Init>

}
 8001190:	bf00      	nop
 8001192:	3738      	adds	r7, #56	; 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	58024400 	.word	0x58024400
 800119c:	58021800 	.word	0x58021800
 80011a0:	58021000 	.word	0x58021000
 80011a4:	58020400 	.word	0x58020400
 80011a8:	58020c00 	.word	0x58020c00
 80011ac:	58020000 	.word	0x58020000
 80011b0:	58020800 	.word	0x58020800

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <HAL_MspInit+0x30>)
 80011cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011d0:	4a08      	ldr	r2, [pc, #32]	; (80011f4 <HAL_MspInit+0x30>)
 80011d2:	f043 0302 	orr.w	r3, r3, #2
 80011d6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_MspInit+0x30>)
 80011dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	58024400 	.word	0x58024400

080011f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b090      	sub	sp, #64	; 0x40
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a78      	ldr	r2, [pc, #480]	; (80013f8 <HAL_ADC_MspInit+0x200>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d14f      	bne.n	80012ba <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800121a:	4b78      	ldr	r3, [pc, #480]	; (80013fc <HAL_ADC_MspInit+0x204>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	4a76      	ldr	r2, [pc, #472]	; (80013fc <HAL_ADC_MspInit+0x204>)
 8001222:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001224:	4b75      	ldr	r3, [pc, #468]	; (80013fc <HAL_ADC_MspInit+0x204>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10e      	bne.n	800124a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800122c:	4b74      	ldr	r3, [pc, #464]	; (8001400 <HAL_ADC_MspInit+0x208>)
 800122e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001232:	4a73      	ldr	r2, [pc, #460]	; (8001400 <HAL_ADC_MspInit+0x208>)
 8001234:	f043 0320 	orr.w	r3, r3, #32
 8001238:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800123c:	4b70      	ldr	r3, [pc, #448]	; (8001400 <HAL_ADC_MspInit+0x208>)
 800123e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001242:	f003 0320 	and.w	r3, r3, #32
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	4b6d      	ldr	r3, [pc, #436]	; (8001400 <HAL_ADC_MspInit+0x208>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001250:	4a6b      	ldr	r2, [pc, #428]	; (8001400 <HAL_ADC_MspInit+0x208>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800125a:	4b69      	ldr	r3, [pc, #420]	; (8001400 <HAL_ADC_MspInit+0x208>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001268:	4b65      	ldr	r3, [pc, #404]	; (8001400 <HAL_ADC_MspInit+0x208>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126e:	4a64      	ldr	r2, [pc, #400]	; (8001400 <HAL_ADC_MspInit+0x208>)
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001278:	4b61      	ldr	r3, [pc, #388]	; (8001400 <HAL_ADC_MspInit+0x208>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127e:	f003 0320 	and.w	r3, r3, #32
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration    
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001286:	2302      	movs	r3, #2
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128a:	2303      	movs	r3, #3
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001296:	4619      	mov	r1, r3
 8001298:	485a      	ldr	r0, [pc, #360]	; (8001404 <HAL_ADC_MspInit+0x20c>)
 800129a:	f002 fa35 	bl	8003708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800129e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a4:	2303      	movs	r3, #3
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b0:	4619      	mov	r1, r3
 80012b2:	4855      	ldr	r0, [pc, #340]	; (8001408 <HAL_ADC_MspInit+0x210>)
 80012b4:	f002 fa28 	bl	8003708 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80012b8:	e099      	b.n	80013ee <HAL_ADC_MspInit+0x1f6>
  else if(hadc->Instance==ADC2)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a53      	ldr	r2, [pc, #332]	; (800140c <HAL_ADC_MspInit+0x214>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d14f      	bne.n	8001364 <HAL_ADC_MspInit+0x16c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012c4:	4b4d      	ldr	r3, [pc, #308]	; (80013fc <HAL_ADC_MspInit+0x204>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a4c      	ldr	r2, [pc, #304]	; (80013fc <HAL_ADC_MspInit+0x204>)
 80012cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012ce:	4b4b      	ldr	r3, [pc, #300]	; (80013fc <HAL_ADC_MspInit+0x204>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d10e      	bne.n	80012f4 <HAL_ADC_MspInit+0xfc>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012d6:	4b4a      	ldr	r3, [pc, #296]	; (8001400 <HAL_ADC_MspInit+0x208>)
 80012d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012dc:	4a48      	ldr	r2, [pc, #288]	; (8001400 <HAL_ADC_MspInit+0x208>)
 80012de:	f043 0320 	orr.w	r3, r3, #32
 80012e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012e6:	4b46      	ldr	r3, [pc, #280]	; (8001400 <HAL_ADC_MspInit+0x208>)
 80012e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b42      	ldr	r3, [pc, #264]	; (8001400 <HAL_ADC_MspInit+0x208>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fa:	4a41      	ldr	r2, [pc, #260]	; (8001400 <HAL_ADC_MspInit+0x208>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001304:	4b3e      	ldr	r3, [pc, #248]	; (8001400 <HAL_ADC_MspInit+0x208>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <HAL_ADC_MspInit+0x208>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001318:	4a39      	ldr	r2, [pc, #228]	; (8001400 <HAL_ADC_MspInit+0x208>)
 800131a:	f043 0320 	orr.w	r3, r3, #32
 800131e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001322:	4b37      	ldr	r3, [pc, #220]	; (8001400 <HAL_ADC_MspInit+0x208>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001330:	2340      	movs	r3, #64	; 0x40
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001340:	4619      	mov	r1, r3
 8001342:	4833      	ldr	r0, [pc, #204]	; (8001410 <HAL_ADC_MspInit+0x218>)
 8001344:	f002 f9e0 	bl	8003708 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001348:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134e:	2303      	movs	r3, #3
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001356:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135a:	4619      	mov	r1, r3
 800135c:	482a      	ldr	r0, [pc, #168]	; (8001408 <HAL_ADC_MspInit+0x210>)
 800135e:	f002 f9d3 	bl	8003708 <HAL_GPIO_Init>
}
 8001362:	e044      	b.n	80013ee <HAL_ADC_MspInit+0x1f6>
  else if(hadc->Instance==ADC3)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <HAL_ADC_MspInit+0x21c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d13f      	bne.n	80013ee <HAL_ADC_MspInit+0x1f6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800136e:	4b24      	ldr	r3, [pc, #144]	; (8001400 <HAL_ADC_MspInit+0x208>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	4a22      	ldr	r2, [pc, #136]	; (8001400 <HAL_ADC_MspInit+0x208>)
 8001376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_ADC_MspInit+0x208>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_ADC_MspInit+0x208>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_ADC_MspInit+0x208>)
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_ADC_MspInit+0x208>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	f003 0320 	and.w	r3, r3, #32
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_ADC_MspInit+0x208>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a13      	ldr	r2, [pc, #76]	; (8001400 <HAL_ADC_MspInit+0x208>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <HAL_ADC_MspInit+0x208>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80013c8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ce:	2303      	movs	r3, #3
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013da:	4619      	mov	r1, r3
 80013dc:	480a      	ldr	r0, [pc, #40]	; (8001408 <HAL_ADC_MspInit+0x210>)
 80013de:	f002 f993 	bl	8003708 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80013e2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80013e6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80013ea:	f000 fc51 	bl	8001c90 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80013ee:	bf00      	nop
 80013f0:	3740      	adds	r7, #64	; 0x40
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40022000 	.word	0x40022000
 80013fc:	240000ec 	.word	0x240000ec
 8001400:	58024400 	.word	0x58024400
 8001404:	58020400 	.word	0x58020400
 8001408:	58021400 	.word	0x58021400
 800140c:	40022100 	.word	0x40022100
 8001410:	58020000 	.word	0x58020000
 8001414:	58026000 	.word	0x58026000

08001418 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	; 0x38
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a49      	ldr	r2, [pc, #292]	; (800155c <HAL_ETH_MspInit+0x144>)
 8001436:	4293      	cmp	r3, r2
 8001438:	f040 808b 	bne.w	8001552 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800143c:	4b48      	ldr	r3, [pc, #288]	; (8001560 <HAL_ETH_MspInit+0x148>)
 800143e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001442:	4a47      	ldr	r2, [pc, #284]	; (8001560 <HAL_ETH_MspInit+0x148>)
 8001444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001448:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800144c:	4b44      	ldr	r3, [pc, #272]	; (8001560 <HAL_ETH_MspInit+0x148>)
 800144e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001452:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001456:	623b      	str	r3, [r7, #32]
 8001458:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800145a:	4b41      	ldr	r3, [pc, #260]	; (8001560 <HAL_ETH_MspInit+0x148>)
 800145c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001460:	4a3f      	ldr	r2, [pc, #252]	; (8001560 <HAL_ETH_MspInit+0x148>)
 8001462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001466:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800146a:	4b3d      	ldr	r3, [pc, #244]	; (8001560 <HAL_ETH_MspInit+0x148>)
 800146c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_ETH_MspInit+0x148>)
 800147a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800147e:	4a38      	ldr	r2, [pc, #224]	; (8001560 <HAL_ETH_MspInit+0x148>)
 8001480:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001484:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001488:	4b35      	ldr	r3, [pc, #212]	; (8001560 <HAL_ETH_MspInit+0x148>)
 800148a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	61bb      	str	r3, [r7, #24]
 8001494:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001496:	4b32      	ldr	r3, [pc, #200]	; (8001560 <HAL_ETH_MspInit+0x148>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	4a30      	ldr	r2, [pc, #192]	; (8001560 <HAL_ETH_MspInit+0x148>)
 800149e:	f043 0304 	orr.w	r3, r3, #4
 80014a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_ETH_MspInit+0x148>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_ETH_MspInit+0x148>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	4a29      	ldr	r2, [pc, #164]	; (8001560 <HAL_ETH_MspInit+0x148>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_ETH_MspInit+0x148>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_ETH_MspInit+0x148>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <HAL_ETH_MspInit+0x148>)
 80014da:	f043 0302 	orr.w	r3, r3, #2
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_ETH_MspInit+0x148>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80014f0:	2332      	movs	r3, #50	; 0x32
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001500:	230b      	movs	r3, #11
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	4816      	ldr	r0, [pc, #88]	; (8001564 <HAL_ETH_MspInit+0x14c>)
 800150c:	f002 f8fc 	bl	8003708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001510:	2386      	movs	r3, #134	; 0x86
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001520:	230b      	movs	r3, #11
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	480f      	ldr	r0, [pc, #60]	; (8001568 <HAL_ETH_MspInit+0x150>)
 800152c:	f002 f8ec 	bl	8003708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001530:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001542:	230b      	movs	r3, #11
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4807      	ldr	r0, [pc, #28]	; (800156c <HAL_ETH_MspInit+0x154>)
 800154e:	f002 f8db 	bl	8003708 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001552:	bf00      	nop
 8001554:	3738      	adds	r7, #56	; 0x38
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40028000 	.word	0x40028000
 8001560:	58024400 	.word	0x58024400
 8001564:	58020800 	.word	0x58020800
 8001568:	58020000 	.word	0x58020000
 800156c:	58020400 	.word	0x58020400

08001570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a34      	ldr	r2, [pc, #208]	; (8001660 <HAL_I2C_MspInit+0xf0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12e      	bne.n	80015f0 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001598:	4a32      	ldr	r2, [pc, #200]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 800159a:	f043 0302 	orr.w	r3, r3, #2
 800159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 80015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015b0:	23c0      	movs	r3, #192	; 0xc0
 80015b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c0:	2304      	movs	r3, #4
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	4619      	mov	r1, r3
 80015ca:	4827      	ldr	r0, [pc, #156]	; (8001668 <HAL_I2C_MspInit+0xf8>)
 80015cc:	f002 f89c 	bl	8003708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 80015d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015d6:	4a23      	ldr	r2, [pc, #140]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 80015d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 80015e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015ee:	e032      	b.n	8001656 <HAL_I2C_MspInit+0xe6>
  else if(hi2c->Instance==I2C2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_I2C_MspInit+0xfc>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d12d      	bne.n	8001656 <HAL_I2C_MspInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	4a18      	ldr	r2, [pc, #96]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 8001602:	f043 0320 	orr.w	r3, r3, #32
 8001606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	f003 0320 	and.w	r3, r3, #32
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001618:	2303      	movs	r3, #3
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161c:	2312      	movs	r3, #18
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001628:	2304      	movs	r3, #4
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	480f      	ldr	r0, [pc, #60]	; (8001670 <HAL_I2C_MspInit+0x100>)
 8001634:	f002 f868 	bl	8003708 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 800163a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800163e:	4a09      	ldr	r2, [pc, #36]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 8001640:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001644:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_I2C_MspInit+0xf4>)
 800164a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
}
 8001656:	bf00      	nop
 8001658:	3730      	adds	r7, #48	; 0x30
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40005400 	.word	0x40005400
 8001664:	58024400 	.word	0x58024400
 8001668:	58020400 	.word	0x58020400
 800166c:	40005800 	.word	0x40005800
 8001670:	58021400 	.word	0x58021400

08001674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a2a      	ldr	r2, [pc, #168]	; (800173c <HAL_SPI_MspInit+0xc8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d14d      	bne.n	8001732 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001696:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_SPI_MspInit+0xcc>)
 8001698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800169c:	4a28      	ldr	r2, [pc, #160]	; (8001740 <HAL_SPI_MspInit+0xcc>)
 800169e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_SPI_MspInit+0xcc>)
 80016a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_SPI_MspInit+0xcc>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	4a21      	ldr	r2, [pc, #132]	; (8001740 <HAL_SPI_MspInit+0xcc>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <HAL_SPI_MspInit+0xcc>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_SPI_MspInit+0xcc>)
 80016d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d8:	4a19      	ldr	r2, [pc, #100]	; (8001740 <HAL_SPI_MspInit+0xcc>)
 80016da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <HAL_SPI_MspInit+0xcc>)
 80016e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f4:	2302      	movs	r3, #2
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	2300      	movs	r3, #0
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001700:	2305      	movs	r3, #5
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <HAL_SPI_MspInit+0xd0>)
 800170c:	f001 fffc 	bl	8003708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001710:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001722:	2305      	movs	r3, #5
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4806      	ldr	r0, [pc, #24]	; (8001748 <HAL_SPI_MspInit+0xd4>)
 800172e:	f001 ffeb 	bl	8003708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40013000 	.word	0x40013000
 8001740:	58024400 	.word	0x58024400
 8001744:	58020c00 	.word	0x58020c00
 8001748:	58021800 	.word	0x58021800

0800174c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800175c:	d10f      	bne.n	800177e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800175e:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 8001760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001764:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 8001770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800177c:	e03d      	b.n	80017fa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a22      	ldr	r2, [pc, #136]	; (800180c <HAL_TIM_Base_MspInit+0xc0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d10f      	bne.n	80017a8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 800178a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800178e:	4a1e      	ldr	r2, [pc, #120]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 8001790:	f043 0302 	orr.w	r3, r3, #2
 8001794:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 800179a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
}
 80017a6:	e028      	b.n	80017fa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a18      	ldr	r2, [pc, #96]	; (8001810 <HAL_TIM_Base_MspInit+0xc4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d10f      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 80017b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 80017ba:	f043 0304 	orr.w	r3, r3, #4
 80017be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 80017c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	e013      	b.n	80017fa <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM5)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <HAL_TIM_Base_MspInit+0xc8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d10e      	bne.n	80017fa <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 80017de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_TIM_Base_MspInit+0xbc>)
 80017ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	58024400 	.word	0x58024400
 800180c:	40000400 	.word	0x40000400
 8001810:	40000800 	.word	0x40000800
 8001814:	40000c00 	.word	0x40000c00

08001818 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08c      	sub	sp, #48	; 0x30
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 031c 	add.w	r3, r7, #28
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001838:	d13f      	bne.n	80018ba <HAL_TIM_MspPostInit+0xa2>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001840:	4a57      	ldr	r2, [pc, #348]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800184a:	4b55      	ldr	r3, [pc, #340]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001858:	4b51      	ldr	r3, [pc, #324]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 800185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185e:	4a50      	ldr	r2, [pc, #320]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001868:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001876:	2320      	movs	r3, #32
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001886:	2301      	movs	r3, #1
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	4844      	ldr	r0, [pc, #272]	; (80019a4 <HAL_TIM_MspPostInit+0x18c>)
 8001892:	f001 ff39 	bl	8003708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018a8:	2301      	movs	r3, #1
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ac:	f107 031c 	add.w	r3, r7, #28
 80018b0:	4619      	mov	r1, r3
 80018b2:	483d      	ldr	r0, [pc, #244]	; (80019a8 <HAL_TIM_MspPostInit+0x190>)
 80018b4:	f001 ff28 	bl	8003708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80018b8:	e06e      	b.n	8001998 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM3)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a3b      	ldr	r2, [pc, #236]	; (80019ac <HAL_TIM_MspPostInit+0x194>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d11f      	bne.n	8001904 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ca:	4a35      	ldr	r2, [pc, #212]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 80018cc:	f043 0304 	orr.w	r3, r3, #4
 80018d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e2:	23c0      	movs	r3, #192	; 0xc0
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018f2:	2302      	movs	r3, #2
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f107 031c 	add.w	r3, r7, #28
 80018fa:	4619      	mov	r1, r3
 80018fc:	482c      	ldr	r0, [pc, #176]	; (80019b0 <HAL_TIM_MspPostInit+0x198>)
 80018fe:	f001 ff03 	bl	8003708 <HAL_GPIO_Init>
}
 8001902:	e049      	b.n	8001998 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM4)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a2a      	ldr	r2, [pc, #168]	; (80019b4 <HAL_TIM_MspPostInit+0x19c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d120      	bne.n	8001950 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 8001916:	f043 0308 	orr.w	r3, r3, #8
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800192c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800193e:	2302      	movs	r3, #2
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	481b      	ldr	r0, [pc, #108]	; (80019b8 <HAL_TIM_MspPostInit+0x1a0>)
 800194a:	f001 fedd 	bl	8003708 <HAL_GPIO_Init>
}
 800194e:	e023      	b.n	8001998 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM5)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a19      	ldr	r2, [pc, #100]	; (80019bc <HAL_TIM_MspPostInit+0x1a4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d11e      	bne.n	8001998 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 800195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001960:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_TIM_MspPostInit+0x188>)
 800196c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001978:	2301      	movs	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001988:	2302      	movs	r3, #2
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	4619      	mov	r1, r3
 8001992:	4804      	ldr	r0, [pc, #16]	; (80019a4 <HAL_TIM_MspPostInit+0x18c>)
 8001994:	f001 feb8 	bl	8003708 <HAL_GPIO_Init>
}
 8001998:	bf00      	nop
 800199a:	3730      	adds	r7, #48	; 0x30
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	58024400 	.word	0x58024400
 80019a4:	58020000 	.word	0x58020000
 80019a8:	58020400 	.word	0x58020400
 80019ac:	40000400 	.word	0x40000400
 80019b0:	58020800 	.word	0x58020800
 80019b4:	40000800 	.word	0x40000800
 80019b8:	58020c00 	.word	0x58020c00
 80019bc:	40000c00 	.word	0x40000c00

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a14:	f000 f8fc 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a20:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <SystemInit+0xac>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a28      	ldr	r2, [pc, #160]	; (8001ac8 <SystemInit+0xac>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <SystemInit+0xb0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <SystemInit+0xb0>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a3c:	4b23      	ldr	r3, [pc, #140]	; (8001acc <SystemInit+0xb0>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <SystemInit+0xb0>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4921      	ldr	r1, [pc, #132]	; (8001acc <SystemInit+0xb0>)
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <SystemInit+0xb4>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <SystemInit+0xb0>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a54:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <SystemInit+0xb0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <SystemInit+0xb0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <SystemInit+0xb0>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <SystemInit+0xb0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <SystemInit+0xb0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <SystemInit+0xb0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <SystemInit+0xb0>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <SystemInit+0xb0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <SystemInit+0xb0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <SystemInit+0xb0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a90:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <SystemInit+0xb0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <SystemInit+0xb0>)
 8001a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <SystemInit+0xb0>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <SystemInit+0xb8>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <SystemInit+0xbc>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aae:	d202      	bcs.n	8001ab6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <SystemInit+0xc0>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SystemInit+0xac>)
 8001ab8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001abc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00
 8001acc:	58024400 	.word	0x58024400
 8001ad0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ad4:	5c001000 	.word	0x5c001000
 8001ad8:	ffff0000 	.word	0xffff0000
 8001adc:	51008108 	.word	0x51008108

08001ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ae4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ae6:	e003      	b.n	8001af0 <LoopCopyDataInit>

08001ae8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001aea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001aec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001aee:	3104      	adds	r1, #4

08001af0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001af0:	480b      	ldr	r0, [pc, #44]	; (8001b20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001af4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001af6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001af8:	d3f6      	bcc.n	8001ae8 <CopyDataInit>
  ldr  r2, =_sbss
 8001afa:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001afc:	e002      	b.n	8001b04 <LoopFillZerobss>

08001afe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001afe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b00:	f842 3b04 	str.w	r3, [r2], #4

08001b04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b04:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b08:	d3f9      	bcc.n	8001afe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b0a:	f7ff ff87 	bl	8001a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f005 ff93 	bl	8007a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b12:	f7fe fc41 	bl	8000398 <main>
  bx  lr    
 8001b16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b18:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001b1c:	08007ac0 	.word	0x08007ac0
  ldr  r0, =_sdata
 8001b20:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b24:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001b28:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8001b2c:	240004e4 	.word	0x240004e4

08001b30 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC3_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f001 f99d 	bl	8002e78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b3e:	f002 fe8b 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8001b42:	4601      	mov	r1, r0
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_Init+0x60>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <HAL_Init+0x64>)
 8001b50:	5cd3      	ldrb	r3, [r2, r3]
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	fa21 f303 	lsr.w	r3, r1, r3
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <HAL_Init+0x68>)
 8001b5c:	6013      	str	r3, [r2, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <HAL_Init+0x68>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_Init+0x60>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	490b      	ldr	r1, [pc, #44]	; (8001b98 <HAL_Init+0x64>)
 8001b6c:	5ccb      	ldrb	r3, [r1, r3]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	fa22 f303 	lsr.w	r3, r2, r3
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_Init+0x6c>)
 8001b78:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f000 f812 	bl	8001ba4 <HAL_InitTick>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_Init+0x56>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e002      	b.n	8001b90 <HAL_Init+0x5c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b8a:	f7ff fb1b 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	58024400 	.word	0x58024400
 8001b98:	08007aa8 	.word	0x08007aa8
 8001b9c:	24000000 	.word	0x24000000
 8001ba0:	24000004 	.word	0x24000004

08001ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bac:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_InitTick+0x60>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e021      	b.n	8001bfc <HAL_InitTick+0x58>
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_InitTick+0x64>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_InitTick+0x60>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f001 f977 	bl	8002ec2 <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x58>
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f001 f94f 	bl	8002e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_InitTick+0x68>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	2400000c 	.word	0x2400000c
 8001c08:	24000000 	.word	0x24000000
 8001c0c:	24000008 	.word	0x24000008

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2400000c 	.word	0x2400000c
 8001c34:	240004e0 	.word	0x240004e0

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	240004e0 	.word	0x240004e0

08001c50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_GetREVID+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0c1b      	lsrs	r3, r3, #16
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	5c001000 	.word	0x5c001000

08001c68 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c78:	4904      	ldr	r1, [pc, #16]	; (8001c8c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	58000400 	.word	0x58000400

08001c90 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	58000400 	.word	0x58000400

08001cbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d24:	b490      	push	{r4, r7}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
 8001d30:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	3360      	adds	r3, #96	; 0x60
 8001d36:	461a      	mov	r2, r3
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	4313      	orrs	r3, r2
 8001d52:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc90      	pop	{r4, r7}
 8001d5c:	4770      	bx	lr

08001d5e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	611a      	str	r2, [r3, #16]
}
 8001d84:	bf00      	nop
 8001d86:	3714      	adds	r7, #20
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001d90:	b490      	push	{r4, r7}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
   register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	3360      	adds	r3, #96	; 0x60
 8001da0:	461a      	mov	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	461c      	mov	r4, r3
   MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	6023      	str	r3, [r4, #0]
}
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc90      	pop	{r4, r7}
 8001dbe:	4770      	bx	lr

08001dc0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001dc0:	b490      	push	{r4, r7}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3330      	adds	r3, #48	; 0x30
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	4413      	add	r3, r2
 8001dde:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001de0:	6822      	ldr	r2, [r4, #0]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	211f      	movs	r1, #31
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	401a      	ands	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0e9b      	lsrs	r3, r3, #26
 8001df6:	f003 011f 	and.w	r1, r3, #31
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	fa01 f303 	lsl.w	r3, r1, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e08:	bf00      	nop
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc90      	pop	{r4, r7}
 8001e10:	4770      	bx	lr

08001e12 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e12:	b490      	push	{r4, r7}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3314      	adds	r3, #20
 8001e22:	461a      	mov	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	0e5b      	lsrs	r3, r3, #25
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	f003 0304 	and.w	r3, r3, #4
 8001e2e:	4413      	add	r3, r2
 8001e30:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001e32:	6822      	ldr	r2, [r4, #0]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	0d1b      	lsrs	r3, r3, #20
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	2107      	movs	r1, #7
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	401a      	ands	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	0d1b      	lsrs	r3, r3, #20
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	4313      	orrs	r3, r2
 8001e56:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc90      	pop	{r4, r7}
 8001e60:	4770      	bx	lr
	...

08001e64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	401a      	ands	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f003 0318 	and.w	r3, r3, #24
 8001e86:	4908      	ldr	r1, [pc, #32]	; (8001ea8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e88:	40d9      	lsrs	r1, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	400b      	ands	r3, r1
 8001e8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e92:	431a      	orrs	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	000fffff 	.word	0x000fffff

08001eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6093      	str	r3, [r2, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	5fffffc0 	.word	0x5fffffc0

08001ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ee4:	d101      	bne.n	8001eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <LL_ADC_EnableInternalRegulator+0x24>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	6fffffc0 	.word	0x6fffffc0

08001f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f34:	d101      	bne.n	8001f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <LL_ADC_IsEnabled+0x18>
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <LL_ADC_IsEnabled+0x1a>
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 0304 	and.w	r3, r3, #4
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d101      	bne.n	8001f86 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0308 	and.w	r3, r3, #8
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d101      	bne.n	8001fac <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e18e      	b.n	80022f4 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff f907 	bl	80011f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff67 	bl	8001ed0 <LL_ADC_IsDeepPowerDownEnabled>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d004      	beq.n	8002012 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff4d 	bl	8001eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff ff82 	bl	8001f20 <LL_ADC_IsInternalRegulatorEnabled>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d113      	bne.n	800204a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff66 	bl	8001ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800202c:	4b9a      	ldr	r3, [pc, #616]	; (8002298 <HAL_ADC_Init+0x2dc>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	099b      	lsrs	r3, r3, #6
 8002032:	4a9a      	ldr	r2, [pc, #616]	; (800229c <HAL_ADC_Init+0x2e0>)
 8002034:	fba2 2303 	umull	r2, r3, r2, r3
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800203c:	e002      	b.n	8002044 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	3b01      	subs	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f9      	bne.n	800203e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ff66 	bl	8001f20 <LL_ADC_IsInternalRegulatorEnabled>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10d      	bne.n	8002076 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f043 0210 	orr.w	r2, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206a:	f043 0201 	orr.w	r2, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff77 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 8002080:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f003 0310 	and.w	r3, r3, #16
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 8129 	bne.w	80022e2 <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 8125 	bne.w	80022e2 <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80020a0:	f043 0202 	orr.w	r2, r3, #2
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff4b 	bl	8001f48 <LL_ADC_IsEnabled>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d136      	bne.n	8002126 <HAL_ADC_Init+0x16a>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a78      	ldr	r2, [pc, #480]	; (80022a0 <HAL_ADC_Init+0x2e4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d004      	beq.n	80020cc <HAL_ADC_Init+0x110>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a77      	ldr	r2, [pc, #476]	; (80022a4 <HAL_ADC_Init+0x2e8>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d10e      	bne.n	80020ea <HAL_ADC_Init+0x12e>
 80020cc:	4874      	ldr	r0, [pc, #464]	; (80022a0 <HAL_ADC_Init+0x2e4>)
 80020ce:	f7ff ff3b 	bl	8001f48 <LL_ADC_IsEnabled>
 80020d2:	4604      	mov	r4, r0
 80020d4:	4873      	ldr	r0, [pc, #460]	; (80022a4 <HAL_ADC_Init+0x2e8>)
 80020d6:	f7ff ff37 	bl	8001f48 <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	4323      	orrs	r3, r4
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	e008      	b.n	80020fc <HAL_ADC_Init+0x140>
 80020ea:	486f      	ldr	r0, [pc, #444]	; (80022a8 <HAL_ADC_Init+0x2ec>)
 80020ec:	f7ff ff2c 	bl	8001f48 <LL_ADC_IsEnabled>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bf0c      	ite	eq
 80020f6:	2301      	moveq	r3, #1
 80020f8:	2300      	movne	r3, #0
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d012      	beq.n	8002126 <HAL_ADC_Init+0x16a>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a66      	ldr	r2, [pc, #408]	; (80022a0 <HAL_ADC_Init+0x2e4>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_ADC_Init+0x158>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a65      	ldr	r2, [pc, #404]	; (80022a4 <HAL_ADC_Init+0x2e8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_ADC_Init+0x15c>
 8002114:	4a65      	ldr	r2, [pc, #404]	; (80022ac <HAL_ADC_Init+0x2f0>)
 8002116:	e000      	b.n	800211a <HAL_ADC_Init+0x15e>
 8002118:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_ADC_Init+0x2f4>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4619      	mov	r1, r3
 8002120:	4610      	mov	r0, r2
 8002122:	f7ff fdcb 	bl	8001cbc <LL_ADC_SetCommonClock>
                  hadc->Init.Overrun                                                    |
                  hadc->Init.Resolution                                                 |
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );

#else
    if((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002126:	f7ff fd93 	bl	8001c50 <HAL_GetREVID>
 800212a:	4602      	mov	r2, r0
 800212c:	f241 0303 	movw	r3, #4099	; 0x1003
 8002130:	429a      	cmp	r2, r3
 8002132:	d914      	bls.n	800215e <HAL_ADC_Init+0x1a2>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b10      	cmp	r3, #16
 800213a:	d110      	bne.n	800215e <HAL_ADC_Init+0x1a2>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7d5b      	ldrb	r3, [r3, #21]
 8002140:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002146:	431a      	orrs	r2, r3
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800214c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7f1b      	ldrb	r3, [r3, #28]
 8002152:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution |(ADC_CFGR_RES_1|ADC_CFGR_RES_0)                |
 8002154:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002156:	f043 030c 	orr.w	r3, r3, #12
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	e00d      	b.n	800217a <HAL_ADC_Init+0x1be>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7d5b      	ldrb	r3, [r3, #21]
 8002162:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002168:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800216e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode) );
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	7f1b      	ldrb	r3, [r3, #28]
 8002174:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7f1b      	ldrb	r3, [r3, #28]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d106      	bne.n	8002190 <HAL_ADC_Init+0x1d4>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	3b01      	subs	r3, #1
 8002188:	045b      	lsls	r3, r3, #17
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002194:	2b00      	cmp	r3, #0
 8002196:	d009      	beq.n	80021ac <HAL_ADC_Init+0x1f0>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	4b40      	ldr	r3, [pc, #256]	; (80022b4 <HAL_ADC_Init+0x2f8>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	69b9      	ldr	r1, [r7, #24]
 80021bc:	430b      	orrs	r3, r1
 80021be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fed2 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 80021ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fedf 	bl	8001f94 <LL_ADC_INJ_IsConversionOngoing>
 80021d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d14a      	bne.n	8002274 <HAL_ADC_Init+0x2b8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d147      	bne.n	8002274 <HAL_ADC_Init+0x2b8>
       )
    {
      tmpCFGR = (
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	7d1b      	ldrb	r3, [r3, #20]
 80021e8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	4b2f      	ldr	r3, [pc, #188]	; (80022b8 <HAL_ADC_Init+0x2fc>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	69b9      	ldr	r1, [r7, #24]
 8002202:	430b      	orrs	r3, r1
 8002204:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800220c:	2b01      	cmp	r3, #1
 800220e:	d11b      	bne.n	8002248 <HAL_ADC_Init+0x28c>
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

      if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2b00      	cmp	r3, #0
       /*  - Oversampling Ratio                                               */
       /*  - Right bit shift                                                  */
       /*  - Left bit shift                                                   */
       /*  - Triggered mode                                                   */
       /*  - Oversampling mode (continued/resumed)                            */
       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_ADC_Init+0x300>)
 800221e:	4013      	ands	r3, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002224:	3a01      	subs	r2, #1
 8002226:	0411      	lsls	r1, r2, #16
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800222c:	4311      	orrs	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002238:	430a      	orrs	r2, r1
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	611a      	str	r2, [r3, #16]
 8002246:	e007      	b.n	8002258 <HAL_ADC_Init+0x29c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	611a      	str	r2, [r3, #16]

      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fb58 	bl	8002924 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d121      	bne.n	80022c0 <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f023 010f 	bic.w	r1, r3, #15
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	1e5a      	subs	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
 8002294:	e01c      	b.n	80022d0 <HAL_ADC_Init+0x314>
 8002296:	bf00      	nop
 8002298:	24000000 	.word	0x24000000
 800229c:	053e2d63 	.word	0x053e2d63
 80022a0:	40022000 	.word	0x40022000
 80022a4:	40022100 	.word	0x40022100
 80022a8:	58026000 	.word	0x58026000
 80022ac:	40022300 	.word	0x40022300
 80022b0:	58026300 	.word	0x58026300
 80022b4:	fff0c003 	.word	0xfff0c003
 80022b8:	ffffbffc 	.word	0xffffbffc
 80022bc:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 020f 	bic.w	r2, r2, #15
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	f023 0303 	bic.w	r3, r3, #3
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
 80022e0:	e007      	b.n	80022f2 <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	f043 0210 	orr.w	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3724      	adds	r7, #36	; 0x24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}

080022fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022fc:	b590      	push	{r4, r7, lr}
 80022fe:	b099      	sub	sp, #100	; 0x64
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a99      	ldr	r2, [pc, #612]	; (800257c <HAL_ADC_ConfigChannel+0x280>)
 8002316:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADC_ConfigChannel+0x2a>
 8002322:	2302      	movs	r3, #2
 8002324:	e2e6      	b.n	80028f4 <HAL_ADC_ConfigChannel+0x5f8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fe1b 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 82cb 	bne.w	80028d6 <HAL_ADC_ConfigChannel+0x5da>
  {
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002348:	2b00      	cmp	r3, #0
 800234a:	d108      	bne.n	800235e <HAL_ADC_ConfigChannel+0x62>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	0e9b      	lsrs	r3, r3, #26
 8002352:	f003 031f 	and.w	r3, r3, #31
 8002356:	2201      	movs	r2, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	e00f      	b.n	800237e <HAL_ADC_ConfigChannel+0x82>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002366:	fa93 f3a3 	rbit	r3, r3
 800236a:	647b      	str	r3, [r7, #68]	; 0x44
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800236c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	2201      	movs	r2, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	69d1      	ldr	r1, [r2, #28]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	61d3      	str	r3, [r2, #28]

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	f7ff fd11 	bl	8001dc0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fde3 	bl	8001f6e <LL_ADC_REG_IsConversionOngoing>
 80023a8:	65b8      	str	r0, [r7, #88]	; 0x58
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff fdf0 	bl	8001f94 <LL_ADC_INJ_IsConversionOngoing>
 80023b4:	6578      	str	r0, [r7, #84]	; 0x54
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 80b3 	bne.w	8002524 <HAL_ADC_ConfigChannel+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 80af 	bne.w	8002524 <HAL_ADC_ConfigChannel+0x228>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	461a      	mov	r2, r3
 80023d4:	f7ff fd1d 	bl	8001e12 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80023d8:	4b69      	ldr	r3, [pc, #420]	; (8002580 <HAL_ADC_ConfigChannel+0x284>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80023e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023e4:	d10b      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x102>
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695a      	ldr	r2, [r3, #20]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	089b      	lsrs	r3, r3, #2
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	e01d      	b.n	800243a <HAL_ADC_ConfigChannel+0x13e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10b      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x128>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	e00a      	b.n	800243a <HAL_ADC_ConfigChannel+0x13e>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	695a      	ldr	r2, [r3, #20]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	653b      	str	r3, [r7, #80]	; 0x50

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d027      	beq.n	8002494 <HAL_ADC_ConfigChannel+0x198>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	6919      	ldr	r1, [r3, #16]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002452:	f7ff fc67 	bl	8001d24 <LL_ADC_SetOffset>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
        /* Set ADC selected offset signed saturation */
        LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6919      	ldr	r1, [r3, #16]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	7e5b      	ldrb	r3, [r3, #25]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d102      	bne.n	800246c <HAL_ADC_ConfigChannel+0x170>
 8002466:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800246a:	e000      	b.n	800246e <HAL_ADC_ConfigChannel+0x172>
 800246c:	2300      	movs	r3, #0
 800246e:	461a      	mov	r2, r3
 8002470:	f7ff fc8e 	bl	8001d90 <LL_ADC_SetOffsetSignedSaturation>

        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
        /* Set ADC selected offset right shift */
        LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6919      	ldr	r1, [r3, #16]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	7e1b      	ldrb	r3, [r3, #24]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_ADC_ConfigChannel+0x18e>
 8002484:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002488:	e000      	b.n	800248c <HAL_ADC_ConfigChannel+0x190>
 800248a:	2300      	movs	r3, #0
 800248c:	461a      	mov	r2, r3
 800248e:	f7ff fc66 	bl	8001d5e <LL_ADC_SetDataRightShift>
 8002492:	e047      	b.n	8002524 <HAL_ADC_ConfigChannel+0x228>
      else
      {
         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
           If this is the case, offset OFRx is disabled since
           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	069b      	lsls	r3, r3, #26
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d107      	bne.n	80024b8 <HAL_ADC_ConfigChannel+0x1bc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024b6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	069b      	lsls	r3, r3, #26
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d107      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x1e0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024da:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	069b      	lsls	r3, r3, #26
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d107      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x204>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024fe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	069b      	lsls	r3, r3, #26
 8002510:	429a      	cmp	r2, r3
 8002512:	d107      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x228>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002522:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fd0d 	bl	8001f48 <LL_ADC_IsEnabled>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	f040 81d9 	bne.w	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6819      	ldr	r1, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	461a      	mov	r2, r3
 8002544:	f7ff fc8e 	bl	8001e64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4a0b      	ldr	r2, [pc, #44]	; (800257c <HAL_ADC_ConfigChannel+0x280>)
 800254e:	4293      	cmp	r3, r2
 8002550:	f040 8101 	bne.w	8002756 <HAL_ADC_ConfigChannel+0x45a>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10f      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x288>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	0e9b      	lsrs	r3, r3, #26
 800256a:	3301      	adds	r3, #1
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	2b09      	cmp	r3, #9
 8002572:	bf94      	ite	ls
 8002574:	2301      	movls	r3, #1
 8002576:	2300      	movhi	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	e016      	b.n	80025aa <HAL_ADC_ConfigChannel+0x2ae>
 800257c:	47ff0000 	.word	0x47ff0000
 8002580:	5c001000 	.word	0x5c001000
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002594:	fab3 f383 	clz	r3, r3
 8002598:	b2db      	uxtb	r3, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	2b09      	cmp	r3, #9
 80025a2:	bf94      	ite	ls
 80025a4:	2301      	movls	r3, #1
 80025a6:	2300      	movhi	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d064      	beq.n	8002678 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_ADC_ConfigChannel+0x2ce>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0e9b      	lsrs	r3, r3, #26
 80025c0:	3301      	adds	r3, #1
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025c8:	e00e      	b.n	80025e8 <HAL_ADC_ConfigChannel+0x2ec>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	3301      	adds	r3, #1
 80025e2:	069b      	lsls	r3, r3, #26
 80025e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d109      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x30c>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	0e9b      	lsrs	r3, r3, #26
 80025fa:	3301      	adds	r3, #1
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	e010      	b.n	800262a <HAL_ADC_ConfigChannel+0x32e>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	ea42 0103 	orr.w	r1, r2, r3
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10a      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x354>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0e9b      	lsrs	r3, r3, #26
 8002640:	3301      	adds	r3, #1
 8002642:	f003 021f 	and.w	r2, r3, #31
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	051b      	lsls	r3, r3, #20
 800264e:	e011      	b.n	8002674 <HAL_ADC_ConfigChannel+0x378>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	fab3 f383 	clz	r3, r3
 8002664:	b2db      	uxtb	r3, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002674:	430b      	orrs	r3, r1
 8002676:	e069      	b.n	800274c <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x398>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	0e9b      	lsrs	r3, r3, #26
 800268a:	3301      	adds	r3, #1
 800268c:	069b      	lsls	r3, r3, #26
 800268e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002692:	e00e      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x3b6>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	61fb      	str	r3, [r7, #28]
  return result;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fab3 f383 	clz	r3, r3
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	069b      	lsls	r3, r3, #26
 80026ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x3d6>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2101      	movs	r1, #1
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	e010      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x3f8>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	617b      	str	r3, [r7, #20]
  return result;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	3301      	adds	r3, #1
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	2101      	movs	r1, #1
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	ea42 0103 	orr.w	r1, r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10d      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x424>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	3301      	adds	r3, #1
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	3b1e      	subs	r3, #30
 8002718:	051b      	lsls	r3, r3, #20
 800271a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800271e:	e014      	b.n	800274a <HAL_ADC_ConfigChannel+0x44e>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	60fb      	str	r3, [r7, #12]
  return result;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	fab3 f383 	clz	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	3b1e      	subs	r3, #30
 8002744:	051b      	lsls	r3, r3, #20
 8002746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800274a:	430b      	orrs	r3, r1
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	6892      	ldr	r2, [r2, #8]
 8002750:	4619      	mov	r1, r3
 8002752:	f7ff fb5e 	bl	8001e12 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	f280 80c4 	bge.w	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a65      	ldr	r2, [pc, #404]	; (80028fc <HAL_ADC_ConfigChannel+0x600>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d004      	beq.n	8002774 <HAL_ADC_ConfigChannel+0x478>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a64      	ldr	r2, [pc, #400]	; (8002900 <HAL_ADC_ConfigChannel+0x604>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x47c>
 8002774:	4b63      	ldr	r3, [pc, #396]	; (8002904 <HAL_ADC_ConfigChannel+0x608>)
 8002776:	e000      	b.n	800277a <HAL_ADC_ConfigChannel+0x47e>
 8002778:	4b63      	ldr	r3, [pc, #396]	; (8002908 <HAL_ADC_ConfigChannel+0x60c>)
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fac4 	bl	8001d08 <LL_ADC_GetCommonPathInternalCh>
 8002780:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a5d      	ldr	r2, [pc, #372]	; (80028fc <HAL_ADC_ConfigChannel+0x600>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d004      	beq.n	8002796 <HAL_ADC_ConfigChannel+0x49a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5b      	ldr	r2, [pc, #364]	; (8002900 <HAL_ADC_ConfigChannel+0x604>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10e      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x4b8>
 8002796:	4859      	ldr	r0, [pc, #356]	; (80028fc <HAL_ADC_ConfigChannel+0x600>)
 8002798:	f7ff fbd6 	bl	8001f48 <LL_ADC_IsEnabled>
 800279c:	4604      	mov	r4, r0
 800279e:	4858      	ldr	r0, [pc, #352]	; (8002900 <HAL_ADC_ConfigChannel+0x604>)
 80027a0:	f7ff fbd2 	bl	8001f48 <LL_ADC_IsEnabled>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4323      	orrs	r3, r4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e008      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x4ca>
 80027b4:	4855      	ldr	r0, [pc, #340]	; (800290c <HAL_ADC_ConfigChannel+0x610>)
 80027b6:	f7ff fbc7 	bl	8001f48 <LL_ADC_IsEnabled>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d07b      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x5c6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a50      	ldr	r2, [pc, #320]	; (8002910 <HAL_ADC_ConfigChannel+0x614>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d12e      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x536>
 80027d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d129      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x536>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a4a      	ldr	r2, [pc, #296]	; (800290c <HAL_ADC_ConfigChannel+0x610>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d17f      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a43      	ldr	r2, [pc, #268]	; (80028fc <HAL_ADC_ConfigChannel+0x600>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d004      	beq.n	80027fc <HAL_ADC_ConfigChannel+0x500>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a42      	ldr	r2, [pc, #264]	; (8002900 <HAL_ADC_ConfigChannel+0x604>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x504>
 80027fc:	4a41      	ldr	r2, [pc, #260]	; (8002904 <HAL_ADC_ConfigChannel+0x608>)
 80027fe:	e000      	b.n	8002802 <HAL_ADC_ConfigChannel+0x506>
 8002800:	4a41      	ldr	r2, [pc, #260]	; (8002908 <HAL_ADC_ConfigChannel+0x60c>)
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f7ff fa69 	bl	8001ce2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002810:	4b40      	ldr	r3, [pc, #256]	; (8002914 <HAL_ADC_ConfigChannel+0x618>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	099b      	lsrs	r3, r3, #6
 8002816:	4a40      	ldr	r2, [pc, #256]	; (8002918 <HAL_ADC_ConfigChannel+0x61c>)
 8002818:	fba2 2303 	umull	r2, r3, r2, r3
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002822:	e002      	b.n	800282a <HAL_ADC_ConfigChannel+0x52e>
              {
                wait_loop_index--;
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	3b01      	subs	r3, #1
 8002828:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1f9      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x528>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002830:	e05a      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a39      	ldr	r2, [pc, #228]	; (800291c <HAL_ADC_ConfigChannel+0x620>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d11e      	bne.n	800287a <HAL_ADC_ConfigChannel+0x57e>
 800283c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800283e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d119      	bne.n	800287a <HAL_ADC_ConfigChannel+0x57e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a30      	ldr	r2, [pc, #192]	; (800290c <HAL_ADC_ConfigChannel+0x610>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d14b      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a29      	ldr	r2, [pc, #164]	; (80028fc <HAL_ADC_ConfigChannel+0x600>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d004      	beq.n	8002864 <HAL_ADC_ConfigChannel+0x568>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a28      	ldr	r2, [pc, #160]	; (8002900 <HAL_ADC_ConfigChannel+0x604>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x56c>
 8002864:	4a27      	ldr	r2, [pc, #156]	; (8002904 <HAL_ADC_ConfigChannel+0x608>)
 8002866:	e000      	b.n	800286a <HAL_ADC_ConfigChannel+0x56e>
 8002868:	4a27      	ldr	r2, [pc, #156]	; (8002908 <HAL_ADC_ConfigChannel+0x60c>)
 800286a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002870:	4619      	mov	r1, r3
 8002872:	4610      	mov	r0, r2
 8002874:	f7ff fa35 	bl	8001ce2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002878:	e036      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a28      	ldr	r2, [pc, #160]	; (8002920 <HAL_ADC_ConfigChannel+0x624>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d131      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
 8002884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d12c      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a1e      	ldr	r2, [pc, #120]	; (800290c <HAL_ADC_ConfigChannel+0x610>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d127      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a17      	ldr	r2, [pc, #92]	; (80028fc <HAL_ADC_ConfigChannel+0x600>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_ADC_ConfigChannel+0x5b0>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a16      	ldr	r2, [pc, #88]	; (8002900 <HAL_ADC_ConfigChannel+0x604>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d101      	bne.n	80028b0 <HAL_ADC_ConfigChannel+0x5b4>
 80028ac:	4a15      	ldr	r2, [pc, #84]	; (8002904 <HAL_ADC_ConfigChannel+0x608>)
 80028ae:	e000      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x5b6>
 80028b0:	4a15      	ldr	r2, [pc, #84]	; (8002908 <HAL_ADC_ConfigChannel+0x60c>)
 80028b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f7ff fa11 	bl	8001ce2 <LL_ADC_SetCommonPathInternalCh>
 80028c0:	e012      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f043 0220 	orr.w	r2, r3, #32
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80028d4:	e008      	b.n	80028e8 <HAL_ADC_ConfigChannel+0x5ec>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3764      	adds	r7, #100	; 0x64
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd90      	pop	{r4, r7, pc}
 80028fc:	40022000 	.word	0x40022000
 8002900:	40022100 	.word	0x40022100
 8002904:	40022300 	.word	0x40022300
 8002908:	58026300 	.word	0x58026300
 800290c:	58026000 	.word	0x58026000
 8002910:	cb840000 	.word	0xcb840000
 8002914:	24000000 	.word	0x24000000
 8002918:	053e2d63 	.word	0x053e2d63
 800291c:	c7520000 	.word	0xc7520000
 8002920:	cfb80000 	.word	0xcfb80000

08002924 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef* hadc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if(ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a70      	ldr	r2, [pc, #448]	; (8002af4 <ADC_ConfigureBoostMode+0x1d0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d004      	beq.n	8002940 <ADC_ConfigureBoostMode+0x1c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6f      	ldr	r2, [pc, #444]	; (8002af8 <ADC_ConfigureBoostMode+0x1d4>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d109      	bne.n	8002954 <ADC_ConfigureBoostMode+0x30>
 8002940:	4b6e      	ldr	r3, [pc, #440]	; (8002afc <ADC_ConfigureBoostMode+0x1d8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf14      	ite	ne
 800294c:	2301      	movne	r3, #1
 800294e:	2300      	moveq	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e008      	b.n	8002966 <ADC_ConfigureBoostMode+0x42>
 8002954:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <ADC_ConfigureBoostMode+0x1dc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01a      	beq.n	80029a0 <ADC_ConfigureBoostMode+0x7c>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800296a:	f002 f8e7 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 800296e:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002978:	d006      	beq.n	8002988 <ADC_ConfigureBoostMode+0x64>
 800297a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800297e:	d00b      	beq.n	8002998 <ADC_ConfigureBoostMode+0x74>
 8002980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002984:	d000      	beq.n	8002988 <ADC_ConfigureBoostMode+0x64>
        break;
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
        break;
      default:
        break;
 8002986:	e05d      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	fbb2 f3f3 	udiv	r3, r2, r3
 8002994:	60fb      	str	r3, [r7, #12]
        break;
 8002996:	e055      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
        freq /= 4UL;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	60fb      	str	r3, [r7, #12]
        break;
 800299e:	e051      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80029a0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029a4:	f002 ffc4 	bl	8005930 <HAL_RCCEx_GetPeriphCLKFreq>
 80029a8:	60f8      	str	r0, [r7, #12]
    switch(hadc->Init.ClockPrescaler)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029b2:	d02a      	beq.n	8002a0a <ADC_ConfigureBoostMode+0xe6>
 80029b4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80029b8:	d813      	bhi.n	80029e2 <ADC_ConfigureBoostMode+0xbe>
 80029ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029be:	d024      	beq.n	8002a0a <ADC_ConfigureBoostMode+0xe6>
 80029c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029c4:	d806      	bhi.n	80029d4 <ADC_ConfigureBoostMode+0xb0>
 80029c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029ca:	d01e      	beq.n	8002a0a <ADC_ConfigureBoostMode+0xe6>
 80029cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029d0:	d01b      	beq.n	8002a0a <ADC_ConfigureBoostMode+0xe6>
        break;
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
        break;
      default:
        break;
 80029d2:	e037      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80029d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d8:	d017      	beq.n	8002a0a <ADC_ConfigureBoostMode+0xe6>
 80029da:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80029de:	d014      	beq.n	8002a0a <ADC_ConfigureBoostMode+0xe6>
        break;
 80029e0:	e030      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80029e2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029e6:	d021      	beq.n	8002a2c <ADC_ConfigureBoostMode+0x108>
 80029e8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80029ec:	d806      	bhi.n	80029fc <ADC_ConfigureBoostMode+0xd8>
 80029ee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80029f2:	d013      	beq.n	8002a1c <ADC_ConfigureBoostMode+0xf8>
 80029f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029f8:	d014      	beq.n	8002a24 <ADC_ConfigureBoostMode+0x100>
        break;
 80029fa:	e023      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
    switch(hadc->Init.ClockPrescaler)
 80029fc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002a00:	d018      	beq.n	8002a34 <ADC_ConfigureBoostMode+0x110>
 8002a02:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002a06:	d019      	beq.n	8002a3c <ADC_ConfigureBoostMode+0x118>
        break;
 8002a08:	e01c      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	0c9b      	lsrs	r3, r3, #18
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	60fb      	str	r3, [r7, #12]
        break;
 8002a1a:	e013      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
        freq /= 16UL;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	60fb      	str	r3, [r7, #12]
      break;
 8002a22:	e00f      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
        freq /= 32UL;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	60fb      	str	r3, [r7, #12]
        break;
 8002a2a:	e00b      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
        freq /= 64UL;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	099b      	lsrs	r3, r3, #6
 8002a30:	60fb      	str	r3, [r7, #12]
        break;
 8002a32:	e007      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
        freq /= 128UL;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	09db      	lsrs	r3, r3, #7
 8002a38:	60fb      	str	r3, [r7, #12]
        break;
 8002a3a:	e003      	b.n	8002a44 <ADC_ConfigureBoostMode+0x120>
        freq /= 256UL;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	60fb      	str	r3, [r7, #12]
        break;
 8002a42:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if(HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002a44:	f7ff f904 	bl	8001c50 <HAL_GetREVID>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	f241 0303 	movw	r3, #4099	; 0x1003
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d815      	bhi.n	8002a7e <ADC_ConfigureBoostMode+0x15a>
  {
    if(freq > 20000000UL)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4a2b      	ldr	r2, [pc, #172]	; (8002b04 <ADC_ConfigureBoostMode+0x1e0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d908      	bls.n	8002a6c <ADC_ConfigureBoostMode+0x148>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a68:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002a6a:	e03e      	b.n	8002aea <ADC_ConfigureBoostMode+0x1c6>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a7a:	609a      	str	r2, [r3, #8]
}
 8002a7c:	e035      	b.n	8002aea <ADC_ConfigureBoostMode+0x1c6>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <ADC_ConfigureBoostMode+0x1e4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d808      	bhi.n	8002a9e <ADC_ConfigureBoostMode+0x17a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689a      	ldr	r2, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	e025      	b.n	8002aea <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 12500000UL)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <ADC_ConfigureBoostMode+0x1e8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d80a      	bhi.n	8002abc <ADC_ConfigureBoostMode+0x198>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab8:	609a      	str	r2, [r3, #8]
}
 8002aba:	e016      	b.n	8002aea <ADC_ConfigureBoostMode+0x1c6>
    else if(freq <= 25000000UL)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <ADC_ConfigureBoostMode+0x1ec>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d80a      	bhi.n	8002ada <ADC_ConfigureBoostMode+0x1b6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	e007      	b.n	8002aea <ADC_ConfigureBoostMode+0x1c6>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002ae8:	609a      	str	r2, [r3, #8]
}
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40022100 	.word	0x40022100
 8002afc:	40022300 	.word	0x40022300
 8002b00:	58026300 	.word	0x58026300
 8002b04:	01312d00 	.word	0x01312d00
 8002b08:	005f5e10 	.word	0x005f5e10
 8002b0c:	00bebc20 	.word	0x00bebc20
 8002b10:	017d7840 	.word	0x017d7840

08002b14 <LL_ADC_IsEnabled>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <LL_ADC_IsEnabled+0x18>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <LL_ADC_IsEnabled+0x1a>
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <LL_ADC_REG_IsConversionOngoing>:
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d101      	bne.n	8002b52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e000      	b.n	8002b54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b09f      	sub	sp, #124	; 0x7c
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e0ba      	b.n	8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a5c      	ldr	r2, [pc, #368]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d102      	bne.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002b90:	4b5b      	ldr	r3, [pc, #364]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	e001      	b.n	8002b9a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f043 0220 	orr.w	r2, r3, #32
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e09d      	b.n	8002cf4 <HAL_ADCEx_MultiModeConfigChannel+0x194>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff ffbd 	bl	8002b3a <LL_ADC_REG_IsConversionOngoing>
 8002bc0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff ffb7 	bl	8002b3a <LL_ADC_REG_IsConversionOngoing>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d17f      	bne.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002bd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d17c      	bne.n	8002cd2 <HAL_ADCEx_MultiModeConfigChannel+0x172>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a47      	ldr	r2, [pc, #284]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x8c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a46      	ldr	r2, [pc, #280]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_ADCEx_MultiModeConfigChannel+0x90>
 8002bec:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002bee:	e000      	b.n	8002bf2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002bf0:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002bf2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d039      	beq.n	8002c70 <HAL_ADCEx_MultiModeConfigChannel+0x110>
    {
    MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a3a      	ldr	r2, [pc, #232]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_ADCEx_MultiModeConfigChannel+0xc2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a38      	ldr	r2, [pc, #224]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10e      	bne.n	8002c40 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002c22:	4836      	ldr	r0, [pc, #216]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c24:	f7ff ff76 	bl	8002b14 <LL_ADC_IsEnabled>
 8002c28:	4604      	mov	r4, r0
 8002c2a:	4835      	ldr	r0, [pc, #212]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c2c:	f7ff ff72 	bl	8002b14 <LL_ADC_IsEnabled>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4323      	orrs	r3, r4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e008      	b.n	8002c52 <HAL_ADCEx_MultiModeConfigChannel+0xf2>
 8002c40:	4832      	ldr	r0, [pc, #200]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002c42:	f7ff ff67 	bl	8002b14 <LL_ADC_IsEnabled>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf0c      	ite	eq
 8002c4c:	2301      	moveq	r3, #1
 8002c4e:	2300      	movne	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d047      	beq.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	6811      	ldr	r1, [r2, #0]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	6892      	ldr	r2, [r2, #8]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c6e:	e03a      	b.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a1e      	ldr	r2, [pc, #120]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <HAL_ADCEx_MultiModeConfigChannel+0x130>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10e      	bne.n	8002cae <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 8002c90:	481a      	ldr	r0, [pc, #104]	; (8002cfc <HAL_ADCEx_MultiModeConfigChannel+0x19c>)
 8002c92:	f7ff ff3f 	bl	8002b14 <LL_ADC_IsEnabled>
 8002c96:	4604      	mov	r4, r0
 8002c98:	4819      	ldr	r0, [pc, #100]	; (8002d00 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>)
 8002c9a:	f7ff ff3b 	bl	8002b14 <LL_ADC_IsEnabled>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	4323      	orrs	r3, r4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	bf0c      	ite	eq
 8002ca6:	2301      	moveq	r3, #1
 8002ca8:	2300      	movne	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	e008      	b.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x160>
 8002cae:	4817      	ldr	r0, [pc, #92]	; (8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002cb0:	f7ff ff30 	bl	8002b14 <LL_ADC_IsEnabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf0c      	ite	eq
 8002cba:	2301      	moveq	r3, #1
 8002cbc:	2300      	movne	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002cce:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002cd0:	e009      	b.n	8002ce6 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd6:	f043 0220 	orr.w	r2, r3, #32
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ce4:	e000      	b.n	8002ce8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cf0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	377c      	adds	r7, #124	; 0x7c
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}
 8002cfc:	40022000 	.word	0x40022000
 8002d00:	40022100 	.word	0x40022100
 8002d04:	40022300 	.word	0x40022300
 8002d08:	58026300 	.word	0x58026300
 8002d0c:	58026000 	.word	0x58026000
 8002d10:	fffff0e0 	.word	0xfffff0e0

08002d14 <__NVIC_SetPriorityGrouping>:
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0307 	and.w	r3, r3, #7
 8002d22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <__NVIC_SetPriorityGrouping+0x40>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d30:	4013      	ands	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <__NVIC_SetPriorityGrouping+0x44>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <__NVIC_SetPriorityGrouping+0x40>)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	60d3      	str	r3, [r2, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00
 8002d58:	05fa0000 	.word	0x05fa0000

08002d5c <__NVIC_GetPriorityGrouping>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <__NVIC_GetPriorityGrouping+0x18>)
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	0a1b      	lsrs	r3, r3, #8
 8002d66:	f003 0307 	and.w	r3, r3, #7
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_SetPriority>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	6039      	str	r1, [r7, #0]
 8002d82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	db0a      	blt.n	8002da2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	490c      	ldr	r1, [pc, #48]	; (8002dc4 <__NVIC_SetPriority+0x4c>)
 8002d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d96:	0112      	lsls	r2, r2, #4
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002da0:	e00a      	b.n	8002db8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	4908      	ldr	r1, [pc, #32]	; (8002dc8 <__NVIC_SetPriority+0x50>)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	3b04      	subs	r3, #4
 8002db0:	0112      	lsls	r2, r2, #4
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	440b      	add	r3, r1
 8002db6:	761a      	strb	r2, [r3, #24]
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	e000e100 	.word	0xe000e100
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <NVIC_EncodePriority>:
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f1c3 0307 	rsb	r3, r3, #7
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	bf28      	it	cs
 8002dea:	2304      	movcs	r3, #4
 8002dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3304      	adds	r3, #4
 8002df2:	2b06      	cmp	r3, #6
 8002df4:	d902      	bls.n	8002dfc <NVIC_EncodePriority+0x30>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3b03      	subs	r3, #3
 8002dfa:	e000      	b.n	8002dfe <NVIC_EncodePriority+0x32>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	f04f 32ff 	mov.w	r2, #4294967295
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	401a      	ands	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e14:	f04f 31ff 	mov.w	r1, #4294967295
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1e:	43d9      	mvns	r1, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	4313      	orrs	r3, r2
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3724      	adds	r7, #36	; 0x24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e44:	d301      	bcc.n	8002e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00f      	b.n	8002e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <SysTick_Config+0x40>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e52:	210f      	movs	r1, #15
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f7ff ff8e 	bl	8002d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <SysTick_Config+0x40>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <SysTick_Config+0x40>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	e000e010 	.word	0xe000e010

08002e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ff47 	bl	8002d14 <__NVIC_SetPriorityGrouping>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	4603      	mov	r3, r0
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
 8002e9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e9c:	f7ff ff5e 	bl	8002d5c <__NVIC_GetPriorityGrouping>
 8002ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	6978      	ldr	r0, [r7, #20]
 8002ea8:	f7ff ff90 	bl	8002dcc <NVIC_EncodePriority>
 8002eac:	4602      	mov	r2, r0
 8002eae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff5f 	bl	8002d78 <__NVIC_SetPriority>
}
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffb2 	bl	8002e34 <SysTick_Config>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e0c6      	b.n	800307c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe fa8e 	bl	8001418 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2223      	movs	r2, #35	; 0x23
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f02:	4b60      	ldr	r3, [pc, #384]	; (8003084 <HAL_ETH_Init+0x1a8>)
 8002f04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f08:	4a5e      	ldr	r2, [pc, #376]	; (8003084 <HAL_ETH_Init+0x1a8>)
 8002f0a:	f043 0302 	orr.w	r3, r3, #2
 8002f0e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002f12:	4b5c      	ldr	r3, [pc, #368]	; (8003084 <HAL_ETH_Init+0x1a8>)
 8002f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	7a1b      	ldrb	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d103      	bne.n	8002f30 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002f28:	2000      	movs	r0, #0
 8002f2a:	f7fe fe9d 	bl	8001c68 <HAL_SYSCFG_ETHInterfaceSelect>
 8002f2e:	e003      	b.n	8002f38 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002f30:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002f34:	f7fe fe98 	bl	8001c68 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f50:	f7fe fe72 	bl	8001c38 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002f56:	e00f      	b.n	8002f78 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002f58:	f7fe fe6e 	bl	8001c38 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f66:	d907      	bls.n	8002f78 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	22e0      	movs	r2, #224	; 0xe0
 8002f72:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e081      	b.n	800307c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e6      	bne.n	8002f58 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fac0 	bl	8003510 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002f90:	f001 fdd4 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b3c      	ldr	r3, [pc, #240]	; (8003088 <HAL_ETH_Init+0x1ac>)
 8002f98:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9c:	0c9a      	lsrs	r2, r3, #18
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3a01      	subs	r2, #1
 8002fa4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fa13 	bl	80033d4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002fc4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	22e0      	movs	r2, #224	; 0xe0
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e04a      	b.n	800307c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	f241 1308 	movw	r3, #4360	; 0x1108
 8002fee:	4413      	add	r3, r2
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b26      	ldr	r3, [pc, #152]	; (800308c <HAL_ETH_Init+0x1b0>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6952      	ldr	r2, [r2, #20]
 8002ffa:	0052      	lsls	r2, r2, #1
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	6809      	ldr	r1, [r1, #0]
 8003000:	431a      	orrs	r2, r3
 8003002:	f241 1308 	movw	r3, #4360	; 0x1108
 8003006:	440b      	add	r3, r1
 8003008:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fad8 	bl	80035c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fb1c 	bl	800364e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	3305      	adds	r3, #5
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	3304      	adds	r3, #4
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	3303      	adds	r3, #3
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	061a      	lsls	r2, r3, #24
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	3302      	adds	r3, #2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	041b      	lsls	r3, r3, #16
 8003048:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	3301      	adds	r3, #1
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003054:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003062:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003064:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2210      	movs	r2, #16
 8003072:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2210      	movs	r2, #16
 8003078:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	58024400 	.word	0x58024400
 8003088:	431bde83 	.word	0x431bde83
 800308c:	ffff8001 	.word	0xffff8001

08003090 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80030a2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	791b      	ldrb	r3, [r3, #4]
 80030a8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80030aa:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	7b1b      	ldrb	r3, [r3, #12]
 80030b0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80030b2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	7b5b      	ldrb	r3, [r3, #13]
 80030b8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80030ba:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	7b9b      	ldrb	r3, [r3, #14]
 80030c0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80030c2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	7bdb      	ldrb	r3, [r3, #15]
 80030c8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80030ca:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	7c12      	ldrb	r2, [r2, #16]
 80030d0:	2a00      	cmp	r2, #0
 80030d2:	d102      	bne.n	80030da <ETH_SetMACConfig+0x4a>
 80030d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80030d8:	e000      	b.n	80030dc <ETH_SetMACConfig+0x4c>
 80030da:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80030dc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	7c52      	ldrb	r2, [r2, #17]
 80030e2:	2a00      	cmp	r2, #0
 80030e4:	d102      	bne.n	80030ec <ETH_SetMACConfig+0x5c>
 80030e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ea:	e000      	b.n	80030ee <ETH_SetMACConfig+0x5e>
 80030ec:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80030ee:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	7c9b      	ldrb	r3, [r3, #18]
 80030f4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80030f6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80030fc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003102:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	7f1b      	ldrb	r3, [r3, #28]
 8003108:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800310a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	7f5b      	ldrb	r3, [r3, #29]
 8003110:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003112:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	7f92      	ldrb	r2, [r2, #30]
 8003118:	2a00      	cmp	r2, #0
 800311a:	d102      	bne.n	8003122 <ETH_SetMACConfig+0x92>
 800311c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003120:	e000      	b.n	8003124 <ETH_SetMACConfig+0x94>
 8003122:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003124:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	7fdb      	ldrb	r3, [r3, #31]
 800312a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800312c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003134:	2a00      	cmp	r2, #0
 8003136:	d102      	bne.n	800313e <ETH_SetMACConfig+0xae>
 8003138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313c:	e000      	b.n	8003140 <ETH_SetMACConfig+0xb0>
 800313e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003140:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003146:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800314e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003150:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b56      	ldr	r3, [pc, #344]	; (80032bc <ETH_SetMACConfig+0x22c>)
 8003162:	4013      	ands	r3, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6812      	ldr	r2, [r2, #0]
 8003168:	68f9      	ldr	r1, [r7, #12]
 800316a:	430b      	orrs	r3, r1
 800316c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800317a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800317c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003184:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003186:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800318e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003190:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003198:	2a00      	cmp	r2, #0
 800319a:	d102      	bne.n	80031a2 <ETH_SetMACConfig+0x112>
 800319c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031a0:	e000      	b.n	80031a4 <ETH_SetMACConfig+0x114>
 80031a2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80031a4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <ETH_SetMACConfig+0x230>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	68f9      	ldr	r1, [r7, #12]
 80031be:	430b      	orrs	r3, r1
 80031c0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031c8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <ETH_SetMACConfig+0x234>)
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	68f9      	ldr	r1, [r7, #12]
 80031e2:	430b      	orrs	r3, r1
 80031e4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80031ec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80031f2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	d101      	bne.n	8003202 <ETH_SetMACConfig+0x172>
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	e000      	b.n	8003204 <ETH_SetMACConfig+0x174>
 8003202:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003204:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003216:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800321a:	4013      	ands	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	68f9      	ldr	r1, [r7, #12]
 8003222:	430b      	orrs	r3, r1
 8003224:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800322c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003234:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	f023 0103 	bic.w	r1, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	430a      	orrs	r2, r1
 800324e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800325a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003276:	2a00      	cmp	r2, #0
 8003278:	d101      	bne.n	800327e <ETH_SetMACConfig+0x1ee>
 800327a:	2240      	movs	r2, #64	; 0x40
 800327c:	e000      	b.n	8003280 <ETH_SetMACConfig+0x1f0>
 800327e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003280:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003288:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800328a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003292:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003294:	4313      	orrs	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80032a0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	00048083 	.word	0x00048083
 80032c0:	c0f88000 	.word	0xc0f88000
 80032c4:	fffffef0 	.word	0xfffffef0

080032c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b38      	ldr	r3, [pc, #224]	; (80033c0 <ETH_SetDMAConfig+0xf8>)
 80032de:	4013      	ands	r3, r2
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	6809      	ldr	r1, [r1, #0]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80032ee:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	791b      	ldrb	r3, [r3, #4]
 80032f4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80032fa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	7b1b      	ldrb	r3, [r3, #12]
 8003300:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	f241 0304 	movw	r3, #4100	; 0x1004
 800330e:	4413      	add	r3, r2
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <ETH_SetDMAConfig+0xfc>)
 8003314:	4013      	ands	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6811      	ldr	r1, [r2, #0]
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	431a      	orrs	r2, r3
 800331e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003322:	440b      	add	r3, r1
 8003324:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	7b5b      	ldrb	r3, [r3, #13]
 800332a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003330:	4313      	orrs	r3, r2
 8003332:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <ETH_SetDMAConfig+0x100>)
 8003340:	4013      	ands	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6811      	ldr	r1, [r2, #0]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	431a      	orrs	r2, r3
 800334a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800334e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	7d1b      	ldrb	r3, [r3, #20]
 8003358:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800335a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	7f5b      	ldrb	r3, [r3, #29]
 8003360:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	f241 1304 	movw	r3, #4356	; 0x1104
 800336e:	4413      	add	r3, r2
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4b16      	ldr	r3, [pc, #88]	; (80033cc <ETH_SetDMAConfig+0x104>)
 8003374:	4013      	ands	r3, r2
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6811      	ldr	r1, [r2, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	431a      	orrs	r2, r3
 800337e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003382:	440b      	add	r3, r1
 8003384:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	7f1b      	ldrb	r3, [r3, #28]
 800338a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003390:	4313      	orrs	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	f241 1308 	movw	r3, #4360	; 0x1108
 800339c:	4413      	add	r3, r2
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <ETH_SetDMAConfig+0x108>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6811      	ldr	r1, [r2, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	f241 1308 	movw	r3, #4360	; 0x1108
 80033b0:	440b      	add	r3, r1
 80033b2:	601a      	str	r2, [r3, #0]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	ffff87fd 	.word	0xffff87fd
 80033c4:	ffff2ffe 	.word	0xffff2ffe
 80033c8:	fffec000 	.word	0xfffec000
 80033cc:	ffc0efef 	.word	0xffc0efef
 80033d0:	7fc0ffff 	.word	0x7fc0ffff

080033d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b0a4      	sub	sp, #144	; 0x90
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80033dc:	2301      	movs	r3, #1
 80033de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80033e2:	2300      	movs	r3, #0
 80033e4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80033fe:	2301      	movs	r3, #1
 8003400:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003404:	2300      	movs	r3, #0
 8003406:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003414:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003416:	2300      	movs	r3, #0
 8003418:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800341c:	2300      	movs	r3, #0
 800341e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800342c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003432:	2300      	movs	r3, #0
 8003434:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003438:	2300      	movs	r3, #0
 800343a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800343c:	2301      	movs	r3, #1
 800343e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003448:	2300      	movs	r3, #0
 800344a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800344e:	2300      	movs	r3, #0
 8003450:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003452:	2300      	movs	r3, #0
 8003454:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003456:	2300      	movs	r3, #0
 8003458:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003466:	2301      	movs	r3, #1
 8003468:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800346c:	2320      	movs	r3, #32
 800346e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003472:	2301      	movs	r3, #1
 8003474:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800347e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003484:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003488:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003490:	2302      	movs	r3, #2
 8003492:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003496:	2300      	movs	r3, #0
 8003498:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800349c:	2300      	movs	r3, #0
 800349e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80034ae:	2300      	movs	r3, #0
 80034b0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80034b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff fde6 	bl	8003090 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80034c8:	2301      	movs	r3, #1
 80034ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80034da:	2300      	movs	r3, #0
 80034dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80034de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80034e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80034ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80034f4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80034fa:	f107 0308 	add.w	r3, r7, #8
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff fee1 	bl	80032c8 <ETH_SetDMAConfig>
}
 8003506:	bf00      	nop
 8003508:	3790      	adds	r7, #144	; 0x90
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003520:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003528:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800352a:	f001 fb07 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 800352e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4a1e      	ldr	r2, [pc, #120]	; (80035ac <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d908      	bls.n	800354a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	4a1d      	ldr	r2, [pc, #116]	; (80035b0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d804      	bhi.n	800354a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e027      	b.n	800359a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4a18      	ldr	r2, [pc, #96]	; (80035b0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d908      	bls.n	8003564 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d804      	bhi.n	8003564 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	e01a      	b.n	800359a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	4a13      	ldr	r2, [pc, #76]	; (80035b4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d903      	bls.n	8003574 <ETH_MAC_MDIO_ClkConfig+0x64>
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4a12      	ldr	r2, [pc, #72]	; (80035b8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d911      	bls.n	8003598 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4a10      	ldr	r2, [pc, #64]	; (80035b8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d908      	bls.n	800358e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d804      	bhi.n	800358e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e005      	b.n	800359a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	e000      	b.n	800359a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003598:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	01312cff 	.word	0x01312cff
 80035b0:	02160ebf 	.word	0x02160ebf
 80035b4:	039386ff 	.word	0x039386ff
 80035b8:	05f5e0ff 	.word	0x05f5e0ff
 80035bc:	08f0d17f 	.word	0x08f0d17f

080035c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e01d      	b.n	800360a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68d9      	ldr	r1, [r3, #12]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2200      	movs	r2, #0
 80035ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2200      	movs	r2, #0
 80035f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	3206      	adds	r2, #6
 8003600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3301      	adds	r3, #1
 8003608:	60fb      	str	r3, [r7, #12]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d9de      	bls.n	80035ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	f241 132c 	movw	r3, #4396	; 0x112c
 800361e:	4413      	add	r3, r2
 8003620:	2203      	movs	r2, #3
 8003622:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68d9      	ldr	r1, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	f241 1314 	movw	r3, #4372	; 0x1114
 8003630:	4413      	add	r3, r2
 8003632:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68da      	ldr	r2, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	bf00      	nop
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e024      	b.n	80036a6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6919      	ldr	r1, [r3, #16]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	440b      	add	r3, r1
 800366c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	2200      	movs	r2, #0
 800367e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2200      	movs	r2, #0
 800368a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	330a      	adds	r3, #10
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3301      	adds	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2b03      	cmp	r3, #3
 80036aa:	d9d7      	bls.n	800365c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	f241 1330 	movw	r3, #4400	; 0x1130
 80036d2:	4413      	add	r3, r2
 80036d4:	2203      	movs	r2, #3
 80036d6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6919      	ldr	r1, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	f241 131c 	movw	r3, #4380	; 0x111c
 80036e4:	4413      	add	r3, r2
 80036e6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	f241 1328 	movw	r3, #4392	; 0x1128
 80036f8:	4413      	add	r3, r2
 80036fa:	6019      	str	r1, [r3, #0]
}
 80036fc:	bf00      	nop
 80036fe:	3714      	adds	r7, #20
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003716:	4b89      	ldr	r3, [pc, #548]	; (800393c <HAL_GPIO_Init+0x234>)
 8003718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800371a:	e194      	b.n	8003a46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8186 	beq.w	8003a40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x3c>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b12      	cmp	r3, #18
 8003742:	d123      	bne.n	800378c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	220f      	movs	r2, #15
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	08da      	lsrs	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3208      	adds	r2, #8
 8003786:	69b9      	ldr	r1, [r7, #24]
 8003788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0203 	and.w	r2, r3, #3
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d00b      	beq.n	80037e0 <HAL_GPIO_Init+0xd8>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d007      	beq.n	80037e0 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037d4:	2b11      	cmp	r3, #17
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0xd8>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b12      	cmp	r3, #18
 80037de:	d130      	bne.n	8003842 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	2203      	movs	r2, #3
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003816:	2201      	movs	r2, #1
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f003 0201 	and.w	r2, r3, #1
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	2203      	movs	r2, #3
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43db      	mvns	r3, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4013      	ands	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80e0 	beq.w	8003a40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003880:	4b2f      	ldr	r3, [pc, #188]	; (8003940 <HAL_GPIO_Init+0x238>)
 8003882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003886:	4a2e      	ldr	r2, [pc, #184]	; (8003940 <HAL_GPIO_Init+0x238>)
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003890:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <HAL_GPIO_Init+0x238>)
 8003892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800389e:	4a29      	ldr	r2, [pc, #164]	; (8003944 <HAL_GPIO_Init+0x23c>)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	089b      	lsrs	r3, r3, #2
 80038a4:	3302      	adds	r3, #2
 80038a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	220f      	movs	r2, #15
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a20      	ldr	r2, [pc, #128]	; (8003948 <HAL_GPIO_Init+0x240>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d052      	beq.n	8003970 <HAL_GPIO_Init+0x268>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1f      	ldr	r2, [pc, #124]	; (800394c <HAL_GPIO_Init+0x244>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d031      	beq.n	8003936 <HAL_GPIO_Init+0x22e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <HAL_GPIO_Init+0x248>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d02b      	beq.n	8003932 <HAL_GPIO_Init+0x22a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_GPIO_Init+0x24c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d025      	beq.n	800392e <HAL_GPIO_Init+0x226>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_GPIO_Init+0x250>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01f      	beq.n	800392a <HAL_GPIO_Init+0x222>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_GPIO_Init+0x254>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d019      	beq.n	8003926 <HAL_GPIO_Init+0x21e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <HAL_GPIO_Init+0x258>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_GPIO_Init+0x21a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a19      	ldr	r2, [pc, #100]	; (8003964 <HAL_GPIO_Init+0x25c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00d      	beq.n	800391e <HAL_GPIO_Init+0x216>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_GPIO_Init+0x260>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <HAL_GPIO_Init+0x212>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_GPIO_Init+0x264>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <HAL_GPIO_Init+0x20e>
 8003912:	2309      	movs	r3, #9
 8003914:	e02d      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 8003916:	230a      	movs	r3, #10
 8003918:	e02b      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 800391a:	2308      	movs	r3, #8
 800391c:	e029      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 800391e:	2307      	movs	r3, #7
 8003920:	e027      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 8003922:	2306      	movs	r3, #6
 8003924:	e025      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 8003926:	2305      	movs	r3, #5
 8003928:	e023      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 800392a:	2304      	movs	r3, #4
 800392c:	e021      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 800392e:	2303      	movs	r3, #3
 8003930:	e01f      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 8003932:	2302      	movs	r3, #2
 8003934:	e01d      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 8003936:	2301      	movs	r3, #1
 8003938:	e01b      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 800393a:	bf00      	nop
 800393c:	58000080 	.word	0x58000080
 8003940:	58024400 	.word	0x58024400
 8003944:	58000400 	.word	0x58000400
 8003948:	58020000 	.word	0x58020000
 800394c:	58020400 	.word	0x58020400
 8003950:	58020800 	.word	0x58020800
 8003954:	58020c00 	.word	0x58020c00
 8003958:	58021000 	.word	0x58021000
 800395c:	58021400 	.word	0x58021400
 8003960:	58021800 	.word	0x58021800
 8003964:	58021c00 	.word	0x58021c00
 8003968:	58022000 	.word	0x58022000
 800396c:	58022400 	.word	0x58022400
 8003970:	2300      	movs	r3, #0
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	f002 0203 	and.w	r2, r2, #3
 8003978:	0092      	lsls	r2, r2, #2
 800397a:	4093      	lsls	r3, r2
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003982:	4938      	ldr	r1, [pc, #224]	; (8003a64 <HAL_GPIO_Init+0x35c>)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	43db      	mvns	r3, r3
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4013      	ands	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003a0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	3301      	adds	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f47f ae63 	bne.w	800371c <HAL_GPIO_Init+0x14>
  }
}
 8003a56:	bf00      	nop
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	58000400 	.word	0x58000400

08003a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
 8003a74:	4613      	mov	r3, r2
 8003a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a78:	787b      	ldrb	r3, [r7, #1]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a84:	e003      	b.n	8003a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	041a      	lsls	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	619a      	str	r2, [r3, #24]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e07f      	b.n	8003bae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd fd54 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003aec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003afc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d107      	bne.n	8003b16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	e006      	b.n	8003b24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d104      	bne.n	8003b36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_I2C_Init+0x11c>)
 8003b42:	430b      	orrs	r3, r1
 8003b44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	ea42 0103 	orr.w	r1, r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	021a      	lsls	r2, r3, #8
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	02008000 	.word	0x02008000

08003bbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d138      	bne.n	8003c44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e032      	b.n	8003c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2224      	movs	r2, #36	; 0x24
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0201 	bic.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6819      	ldr	r1, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f042 0201 	orr.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	e000      	b.n	8003c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c44:	2302      	movs	r3, #2
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d139      	bne.n	8003cdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e033      	b.n	8003cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2224      	movs	r2, #36	; 0x24
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0201 	bic.w	r2, r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ca4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	e000      	b.n	8003cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
  }
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_PWREx_ConfigSupply+0x70>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d00a      	beq.n	8003d16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003d00:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <HAL_PWREx_ConfigSupply+0x70>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d001      	beq.n	8003d12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e01f      	b.n	8003d52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e01d      	b.n	8003d52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003d16:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <HAL_PWREx_ConfigSupply+0x70>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f023 0207 	bic.w	r2, r3, #7
 8003d1e:	490f      	ldr	r1, [pc, #60]	; (8003d5c <HAL_PWREx_ConfigSupply+0x70>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003d26:	f7fd ff87 	bl	8001c38 <HAL_GetTick>
 8003d2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d2c:	e009      	b.n	8003d42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d2e:	f7fd ff83 	bl	8001c38 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d3c:	d901      	bls.n	8003d42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e007      	b.n	8003d52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_PWREx_ConfigSupply+0x70>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4e:	d1ee      	bne.n	8003d2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	58024800 	.word	0x58024800

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	; 0x30
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e3c4      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 8087 	beq.w	8003e8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d80:	4ba2      	ldr	r3, [pc, #648]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d8a:	4ba0      	ldr	r3, [pc, #640]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d92:	2b10      	cmp	r3, #16
 8003d94:	d007      	beq.n	8003da6 <HAL_RCC_OscConfig+0x46>
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	2b18      	cmp	r3, #24
 8003d9a:	d110      	bne.n	8003dbe <HAL_RCC_OscConfig+0x5e>
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d10b      	bne.n	8003dbe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da6:	4b99      	ldr	r3, [pc, #612]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d06c      	beq.n	8003e8c <HAL_RCC_OscConfig+0x12c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d168      	bne.n	8003e8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e39e      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc6:	d106      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x76>
 8003dc8:	4b90      	ldr	r3, [pc, #576]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a8f      	ldr	r2, [pc, #572]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	e02e      	b.n	8003e34 <HAL_RCC_OscConfig+0xd4>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x98>
 8003dde:	4b8b      	ldr	r3, [pc, #556]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a8a      	ldr	r2, [pc, #552]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	4b88      	ldr	r3, [pc, #544]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a87      	ldr	r2, [pc, #540]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e01d      	b.n	8003e34 <HAL_RCC_OscConfig+0xd4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0xbc>
 8003e02:	4b82      	ldr	r3, [pc, #520]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a81      	ldr	r2, [pc, #516]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b7f      	ldr	r3, [pc, #508]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a7e      	ldr	r2, [pc, #504]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	e00b      	b.n	8003e34 <HAL_RCC_OscConfig+0xd4>
 8003e1c:	4b7b      	ldr	r3, [pc, #492]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a7a      	ldr	r2, [pc, #488]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	4b78      	ldr	r3, [pc, #480]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a77      	ldr	r2, [pc, #476]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d013      	beq.n	8003e64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fefc 	bl	8001c38 <HAL_GetTick>
 8003e40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e44:	f7fd fef8 	bl	8001c38 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e352      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e56:	4b6d      	ldr	r3, [pc, #436]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0xe4>
 8003e62:	e014      	b.n	8003e8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e64:	f7fd fee8 	bl	8001c38 <HAL_GetTick>
 8003e68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e6c:	f7fd fee4 	bl	8001c38 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b64      	cmp	r3, #100	; 0x64
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e33e      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e7e:	4b63      	ldr	r3, [pc, #396]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f0      	bne.n	8003e6c <HAL_RCC_OscConfig+0x10c>
 8003e8a:	e000      	b.n	8003e8e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8092 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e9c:	4b5b      	ldr	r3, [pc, #364]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ea4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ea6:	4b59      	ldr	r3, [pc, #356]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x162>
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	2b18      	cmp	r3, #24
 8003eb6:	d12d      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1b4>
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f003 0303 	and.w	r3, r3, #3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d128      	bne.n	8003f14 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ec2:	4b52      	ldr	r3, [pc, #328]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d005      	beq.n	8003eda <HAL_RCC_OscConfig+0x17a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e310      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eda:	f7fd feb9 	bl	8001c50 <HAL_GetREVID>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	f241 0303 	movw	r3, #4099	; 0x1003
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d80a      	bhi.n	8003efe <HAL_RCC_OscConfig+0x19e>
 8003ee8:	4b48      	ldr	r3, [pc, #288]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	031b      	lsls	r3, r3, #12
 8003ef6:	4945      	ldr	r1, [pc, #276]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003efc:	e060      	b.n	8003fc0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efe:	4b43      	ldr	r3, [pc, #268]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	061b      	lsls	r3, r3, #24
 8003f0c:	493f      	ldr	r1, [pc, #252]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f12:	e055      	b.n	8003fc0 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d038      	beq.n	8003f8e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f023 0219 	bic.w	r2, r3, #25
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	4938      	ldr	r1, [pc, #224]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2e:	f7fd fe83 	bl	8001c38 <HAL_GetTick>
 8003f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fd fe7f 	bl	8001c38 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e2d9      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f48:	4b30      	ldr	r3, [pc, #192]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f54:	f7fd fe7c 	bl	8001c50 <HAL_GetREVID>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d80a      	bhi.n	8003f78 <HAL_RCC_OscConfig+0x218>
 8003f62:	4b2a      	ldr	r3, [pc, #168]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	031b      	lsls	r3, r3, #12
 8003f70:	4926      	ldr	r1, [pc, #152]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	604b      	str	r3, [r1, #4]
 8003f76:	e023      	b.n	8003fc0 <HAL_RCC_OscConfig+0x260>
 8003f78:	4b24      	ldr	r3, [pc, #144]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	061b      	lsls	r3, r3, #24
 8003f86:	4921      	ldr	r1, [pc, #132]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	604b      	str	r3, [r1, #4]
 8003f8c:	e018      	b.n	8003fc0 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8e:	4b1f      	ldr	r3, [pc, #124]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1e      	ldr	r2, [pc, #120]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fd fe4d 	bl	8001c38 <HAL_GetTick>
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa2:	f7fd fe49 	bl	8001c38 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e2a3      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fb4:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0304 	and.w	r3, r3, #4
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f0      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8091 	beq.w	80040f0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fd6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003fd8:	4b0c      	ldr	r3, [pc, #48]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d007      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x294>
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b18      	cmp	r3, #24
 8003fe8:	d12f      	bne.n	800404a <HAL_RCC_OscConfig+0x2ea>
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d12a      	bne.n	800404a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <HAL_RCC_OscConfig+0x2ac>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d007      	beq.n	8004010 <HAL_RCC_OscConfig+0x2b0>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d003      	beq.n	8004010 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e277      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
 800400c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004010:	f7fd fe1e 	bl	8001c50 <HAL_GetREVID>
 8004014:	4602      	mov	r2, r0
 8004016:	f241 0303 	movw	r3, #4099	; 0x1003
 800401a:	429a      	cmp	r2, r3
 800401c:	d80a      	bhi.n	8004034 <HAL_RCC_OscConfig+0x2d4>
 800401e:	4ba2      	ldr	r3, [pc, #648]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	069b      	lsls	r3, r3, #26
 800402c:	499e      	ldr	r1, [pc, #632]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 800402e:	4313      	orrs	r3, r2
 8004030:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004032:	e05d      	b.n	80040f0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004034:	4b9c      	ldr	r3, [pc, #624]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	061b      	lsls	r3, r3, #24
 8004042:	4999      	ldr	r1, [pc, #612]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004044:	4313      	orrs	r3, r2
 8004046:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004048:	e052      	b.n	80040f0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d035      	beq.n	80040be <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004052:	4b95      	ldr	r3, [pc, #596]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a94      	ldr	r2, [pc, #592]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405e:	f7fd fdeb 	bl	8001c38 <HAL_GetTick>
 8004062:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004066:	f7fd fde7 	bl	8001c38 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e241      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004078:	4b8b      	ldr	r3, [pc, #556]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004084:	f7fd fde4 	bl	8001c50 <HAL_GetREVID>
 8004088:	4602      	mov	r2, r0
 800408a:	f241 0303 	movw	r3, #4099	; 0x1003
 800408e:	429a      	cmp	r2, r3
 8004090:	d80a      	bhi.n	80040a8 <HAL_RCC_OscConfig+0x348>
 8004092:	4b85      	ldr	r3, [pc, #532]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	069b      	lsls	r3, r3, #26
 80040a0:	4981      	ldr	r1, [pc, #516]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	604b      	str	r3, [r1, #4]
 80040a6:	e023      	b.n	80040f0 <HAL_RCC_OscConfig+0x390>
 80040a8:	4b7f      	ldr	r3, [pc, #508]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	497c      	ldr	r1, [pc, #496]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60cb      	str	r3, [r1, #12]
 80040bc:	e018      	b.n	80040f0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80040be:	4b7a      	ldr	r3, [pc, #488]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a79      	ldr	r2, [pc, #484]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 80040c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7fd fdb5 	bl	8001c38 <HAL_GetTick>
 80040ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040d2:	f7fd fdb1 	bl	8001c38 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e20b      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80040e4:	4b70      	ldr	r3, [pc, #448]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f0      	bne.n	80040d2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d036      	beq.n	800416a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d019      	beq.n	8004138 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004104:	4b68      	ldr	r3, [pc, #416]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004108:	4a67      	ldr	r2, [pc, #412]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fd fd92 	bl	8001c38 <HAL_GetTick>
 8004114:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004118:	f7fd fd8e 	bl	8001c38 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e1e8      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800412a:	4b5f      	ldr	r3, [pc, #380]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 800412c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x3b8>
 8004136:	e018      	b.n	800416a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004138:	4b5b      	ldr	r3, [pc, #364]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 800413a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800413c:	4a5a      	ldr	r2, [pc, #360]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd fd78 	bl	8001c38 <HAL_GetTick>
 8004148:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414c:	f7fd fd74 	bl	8001c38 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1ce      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800415e:	4b52      	ldr	r3, [pc, #328]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d036      	beq.n	80041e4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d019      	beq.n	80041b2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800417e:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a49      	ldr	r2, [pc, #292]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004184:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004188:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800418a:	f7fd fd55 	bl	8001c38 <HAL_GetTick>
 800418e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004192:	f7fd fd51 	bl	8001c38 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e1ab      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041a4:	4b40      	ldr	r3, [pc, #256]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x432>
 80041b0:	e018      	b.n	80041e4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041b2:	4b3d      	ldr	r3, [pc, #244]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a3c      	ldr	r2, [pc, #240]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 80041b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80041be:	f7fd fd3b 	bl	8001c38 <HAL_GetTick>
 80041c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80041c6:	f7fd fd37 	bl	8001c38 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e191      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041d8:	4b33      	ldr	r3, [pc, #204]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 8086 	beq.w	80042fe <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041f2:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <HAL_RCC_OscConfig+0x54c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a2d      	ldr	r2, [pc, #180]	; (80042ac <HAL_RCC_OscConfig+0x54c>)
 80041f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041fe:	f7fd fd1b 	bl	8001c38 <HAL_GetTick>
 8004202:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004206:	f7fd fd17 	bl	8001c38 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b64      	cmp	r3, #100	; 0x64
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e171      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004218:	4b24      	ldr	r3, [pc, #144]	; (80042ac <HAL_RCC_OscConfig+0x54c>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d106      	bne.n	800423a <HAL_RCC_OscConfig+0x4da>
 800422c:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 800422e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004230:	4a1d      	ldr	r2, [pc, #116]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	6713      	str	r3, [r2, #112]	; 0x70
 8004238:	e02d      	b.n	8004296 <HAL_RCC_OscConfig+0x536>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x4fc>
 8004242:	4b19      	ldr	r3, [pc, #100]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	6713      	str	r3, [r2, #112]	; 0x70
 800424e:	4b16      	ldr	r3, [pc, #88]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004254:	f023 0304 	bic.w	r3, r3, #4
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	e01c      	b.n	8004296 <HAL_RCC_OscConfig+0x536>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b05      	cmp	r3, #5
 8004262:	d10c      	bne.n	800427e <HAL_RCC_OscConfig+0x51e>
 8004264:	4b10      	ldr	r3, [pc, #64]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a0f      	ldr	r2, [pc, #60]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 800426a:	f043 0304 	orr.w	r3, r3, #4
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	4b0d      	ldr	r3, [pc, #52]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a0c      	ldr	r2, [pc, #48]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
 800427c:	e00b      	b.n	8004296 <HAL_RCC_OscConfig+0x536>
 800427e:	4b0a      	ldr	r3, [pc, #40]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a09      	ldr	r2, [pc, #36]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a06      	ldr	r2, [pc, #24]	; (80042a8 <HAL_RCC_OscConfig+0x548>)
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01a      	beq.n	80042d4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429e:	f7fd fccb 	bl	8001c38 <HAL_GetTick>
 80042a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042a4:	e00f      	b.n	80042c6 <HAL_RCC_OscConfig+0x566>
 80042a6:	bf00      	nop
 80042a8:	58024400 	.word	0x58024400
 80042ac:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fd fcc2 	bl	8001c38 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e11a      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c6:	4b8f      	ldr	r3, [pc, #572]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ee      	beq.n	80042b0 <HAL_RCC_OscConfig+0x550>
 80042d2:	e014      	b.n	80042fe <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fd fcb0 	bl	8001c38 <HAL_GetTick>
 80042d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fd fcac 	bl	8001c38 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e104      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042f2:	4b84      	ldr	r3, [pc, #528]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ee      	bne.n	80042dc <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80f9 	beq.w	80044fa <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004308:	4b7e      	ldr	r3, [pc, #504]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004310:	2b18      	cmp	r3, #24
 8004312:	f000 80b4 	beq.w	800447e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	2b02      	cmp	r3, #2
 800431c:	f040 8095 	bne.w	800444a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004320:	4b78      	ldr	r3, [pc, #480]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a77      	ldr	r2, [pc, #476]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004326:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800432a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fd fc84 	bl	8001c38 <HAL_GetTick>
 8004330:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004334:	f7fd fc80 	bl	8001c38 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0da      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004346:	4b6f      	ldr	r3, [pc, #444]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004352:	4b6c      	ldr	r3, [pc, #432]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004356:	4b6c      	ldr	r3, [pc, #432]	; (8004508 <HAL_RCC_OscConfig+0x7a8>)
 8004358:	4013      	ands	r3, r2
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004362:	0112      	lsls	r2, r2, #4
 8004364:	430a      	orrs	r2, r1
 8004366:	4967      	ldr	r1, [pc, #412]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004368:	4313      	orrs	r3, r2
 800436a:	628b      	str	r3, [r1, #40]	; 0x28
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	3b01      	subs	r3, #1
 8004372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	3b01      	subs	r3, #1
 800437c:	025b      	lsls	r3, r3, #9
 800437e:	b29b      	uxth	r3, r3
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	3b01      	subs	r3, #1
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004394:	3b01      	subs	r3, #1
 8004396:	061b      	lsls	r3, r3, #24
 8004398:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800439c:	4959      	ldr	r1, [pc, #356]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80043a2:	4b58      	ldr	r3, [pc, #352]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	4a57      	ldr	r2, [pc, #348]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80043ae:	4b55      	ldr	r3, [pc, #340]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b2:	4b56      	ldr	r3, [pc, #344]	; (800450c <HAL_RCC_OscConfig+0x7ac>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80043ba:	00d2      	lsls	r2, r2, #3
 80043bc:	4951      	ldr	r1, [pc, #324]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80043c2:	4b50      	ldr	r3, [pc, #320]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c6:	f023 020c 	bic.w	r2, r3, #12
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	494d      	ldr	r1, [pc, #308]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80043d4:	4b4b      	ldr	r3, [pc, #300]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	f023 0202 	bic.w	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e0:	4948      	ldr	r1, [pc, #288]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	4a46      	ldr	r2, [pc, #280]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f2:	4b44      	ldr	r3, [pc, #272]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	4a43      	ldr	r2, [pc, #268]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043fe:	4b41      	ldr	r3, [pc, #260]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	4a40      	ldr	r2, [pc, #256]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004408:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800440a:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	4a3d      	ldr	r2, [pc, #244]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004410:	f043 0301 	orr.w	r3, r3, #1
 8004414:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004416:	4b3b      	ldr	r3, [pc, #236]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a3a      	ldr	r2, [pc, #232]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 800441c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004422:	f7fd fc09 	bl	8001c38 <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7fd fc05 	bl	8001c38 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e05f      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800443c:	4b31      	ldr	r3, [pc, #196]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x6ca>
 8004448:	e057      	b.n	80044fa <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b2e      	ldr	r3, [pc, #184]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a2d      	ldr	r2, [pc, #180]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004450:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fd fbef 	bl	8001c38 <HAL_GetTick>
 800445a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445e:	f7fd fbeb 	bl	8001c38 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e045      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004470:	4b24      	ldr	r3, [pc, #144]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x6fe>
 800447c:	e03d      	b.n	80044fa <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800447e:	4b21      	ldr	r3, [pc, #132]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004484:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <HAL_RCC_OscConfig+0x7a4>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	2b01      	cmp	r3, #1
 8004490:	d031      	beq.n	80044f6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0203 	and.w	r2, r3, #3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d12a      	bne.n	80044f6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	091b      	lsrs	r3, r3, #4
 80044a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d122      	bne.n	80044f6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d11a      	bne.n	80044f6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	0a5b      	lsrs	r3, r3, #9
 80044c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044cc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d111      	bne.n	80044f6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d108      	bne.n	80044f6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	0e1b      	lsrs	r3, r3, #24
 80044e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3730      	adds	r7, #48	; 0x30
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	58024400 	.word	0x58024400
 8004508:	fffffc0c 	.word	0xfffffc0c
 800450c:	ffff0007 	.word	0xffff0007

08004510 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e18d      	b.n	8004840 <HAL_RCC_ClockConfig+0x330>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004524:	4b8a      	ldr	r3, [pc, #552]	; (8004750 <HAL_RCC_ClockConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d910      	bls.n	8004554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b87      	ldr	r3, [pc, #540]	; (8004750 <HAL_RCC_ClockConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 020f 	bic.w	r2, r3, #15
 800453a:	4985      	ldr	r1, [pc, #532]	; (8004750 <HAL_RCC_ClockConfig+0x240>)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004542:	4b83      	ldr	r3, [pc, #524]	; (8004750 <HAL_RCC_ClockConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d001      	beq.n	8004554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e175      	b.n	8004840 <HAL_RCC_ClockConfig+0x330>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d010      	beq.n	8004582 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	4b7b      	ldr	r3, [pc, #492]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800456c:	429a      	cmp	r2, r3
 800456e:	d908      	bls.n	8004582 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004570:	4b78      	ldr	r3, [pc, #480]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	4975      	ldr	r1, [pc, #468]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 800457e:	4313      	orrs	r3, r2
 8004580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d010      	beq.n	80045b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695a      	ldr	r2, [r3, #20]
 8004592:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800459a:	429a      	cmp	r2, r3
 800459c:	d908      	bls.n	80045b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800459e:	4b6d      	ldr	r3, [pc, #436]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	496a      	ldr	r1, [pc, #424]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d010      	beq.n	80045de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699a      	ldr	r2, [r3, #24]
 80045c0:	4b64      	ldr	r3, [pc, #400]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d908      	bls.n	80045de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045cc:	4b61      	ldr	r3, [pc, #388]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	495e      	ldr	r1, [pc, #376]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d010      	beq.n	800460c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	4b59      	ldr	r3, [pc, #356]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d908      	bls.n	800460c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80045fa:	4b56      	ldr	r3, [pc, #344]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	4953      	ldr	r1, [pc, #332]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004608:	4313      	orrs	r3, r2
 800460a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	4b4d      	ldr	r3, [pc, #308]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	429a      	cmp	r2, r3
 8004626:	d908      	bls.n	800463a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004628:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f023 020f 	bic.w	r2, r3, #15
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4947      	ldr	r1, [pc, #284]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004636:	4313      	orrs	r3, r2
 8004638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d055      	beq.n	80046f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004646:	4b43      	ldr	r3, [pc, #268]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4940      	ldr	r1, [pc, #256]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004654:	4313      	orrs	r3, r2
 8004656:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d107      	bne.n	8004670 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004660:	4b3c      	ldr	r3, [pc, #240]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d121      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0e7      	b.n	8004840 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b03      	cmp	r3, #3
 8004676:	d107      	bne.n	8004688 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004678:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d115      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0db      	b.n	8004840 <HAL_RCC_ClockConfig+0x330>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004690:	4b30      	ldr	r3, [pc, #192]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d109      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0cf      	b.n	8004840 <HAL_RCC_ClockConfig+0x330>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046a0:	4b2c      	ldr	r3, [pc, #176]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0c7      	b.n	8004840 <HAL_RCC_ClockConfig+0x330>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046b0:	4b28      	ldr	r3, [pc, #160]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f023 0207 	bic.w	r2, r3, #7
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4925      	ldr	r1, [pc, #148]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c2:	f7fd fab9 	bl	8001c38 <HAL_GetTick>
 80046c6:	60f8      	str	r0, [r7, #12]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ca:	f7fd fab5 	bl	8001c38 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e0af      	b.n	8004840 <HAL_RCC_ClockConfig+0x330>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e0:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d1eb      	bne.n	80046ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d010      	beq.n	8004720 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68da      	ldr	r2, [r3, #12]
 8004702:	4b14      	ldr	r3, [pc, #80]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	429a      	cmp	r2, r3
 800470c:	d208      	bcs.n	8004720 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800470e:	4b11      	ldr	r3, [pc, #68]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f023 020f 	bic.w	r2, r3, #15
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	490e      	ldr	r1, [pc, #56]	; (8004754 <HAL_RCC_ClockConfig+0x244>)
 800471c:	4313      	orrs	r3, r2
 800471e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_ClockConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d214      	bcs.n	8004758 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800472e:	4b08      	ldr	r3, [pc, #32]	; (8004750 <HAL_RCC_ClockConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f023 020f 	bic.w	r2, r3, #15
 8004736:	4906      	ldr	r1, [pc, #24]	; (8004750 <HAL_RCC_ClockConfig+0x240>)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	4313      	orrs	r3, r2
 800473c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b04      	ldr	r3, [pc, #16]	; (8004750 <HAL_RCC_ClockConfig+0x240>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d005      	beq.n	8004758 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e077      	b.n	8004840 <HAL_RCC_ClockConfig+0x330>
 8004750:	52002000 	.word	0x52002000
 8004754:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d010      	beq.n	8004786 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	4b37      	ldr	r3, [pc, #220]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004770:	429a      	cmp	r2, r3
 8004772:	d208      	bcs.n	8004786 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004774:	4b34      	ldr	r3, [pc, #208]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	4931      	ldr	r1, [pc, #196]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 8004782:	4313      	orrs	r3, r2
 8004784:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d010      	beq.n	80047b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	4b2c      	ldr	r3, [pc, #176]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800479e:	429a      	cmp	r2, r3
 80047a0:	d208      	bcs.n	80047b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047a2:	4b29      	ldr	r3, [pc, #164]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	4926      	ldr	r1, [pc, #152]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d010      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699a      	ldr	r2, [r3, #24]
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d208      	bcs.n	80047e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047d0:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	491a      	ldr	r1, [pc, #104]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d010      	beq.n	8004810 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69da      	ldr	r2, [r3, #28]
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d208      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	490f      	ldr	r1, [pc, #60]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 800480c:	4313      	orrs	r3, r2
 800480e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004810:	f000 f822 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 8004814:	4601      	mov	r1, r0
 8004816:	4b0c      	ldr	r3, [pc, #48]	; (8004848 <HAL_RCC_ClockConfig+0x338>)
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	4a0a      	ldr	r2, [pc, #40]	; (800484c <HAL_RCC_ClockConfig+0x33c>)
 8004822:	5cd3      	ldrb	r3, [r2, r3]
 8004824:	f003 031f 	and.w	r3, r3, #31
 8004828:	fa21 f303 	lsr.w	r3, r1, r3
 800482c:	4a08      	ldr	r2, [pc, #32]	; (8004850 <HAL_RCC_ClockConfig+0x340>)
 800482e:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif
  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004830:	4b08      	ldr	r3, [pc, #32]	; (8004854 <HAL_RCC_ClockConfig+0x344>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7fd f9b5 	bl	8001ba4 <HAL_InitTick>
 800483a:	4603      	mov	r3, r0
 800483c:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800483e:	7afb      	ldrb	r3, [r7, #11]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	58024400 	.word	0x58024400
 800484c:	08007aa8 	.word	0x08007aa8
 8004850:	24000000 	.word	0x24000000
 8004854:	24000008 	.word	0x24000008

08004858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	; 0x24
 800485c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800485e:	4baf      	ldr	r3, [pc, #700]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004866:	2b18      	cmp	r3, #24
 8004868:	f200 814e 	bhi.w	8004b08 <HAL_RCC_GetSysClockFreq+0x2b0>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <HAL_RCC_GetSysClockFreq+0x1c>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	080048d9 	.word	0x080048d9
 8004878:	08004b09 	.word	0x08004b09
 800487c:	08004b09 	.word	0x08004b09
 8004880:	08004b09 	.word	0x08004b09
 8004884:	08004b09 	.word	0x08004b09
 8004888:	08004b09 	.word	0x08004b09
 800488c:	08004b09 	.word	0x08004b09
 8004890:	08004b09 	.word	0x08004b09
 8004894:	080048ff 	.word	0x080048ff
 8004898:	08004b09 	.word	0x08004b09
 800489c:	08004b09 	.word	0x08004b09
 80048a0:	08004b09 	.word	0x08004b09
 80048a4:	08004b09 	.word	0x08004b09
 80048a8:	08004b09 	.word	0x08004b09
 80048ac:	08004b09 	.word	0x08004b09
 80048b0:	08004b09 	.word	0x08004b09
 80048b4:	08004905 	.word	0x08004905
 80048b8:	08004b09 	.word	0x08004b09
 80048bc:	08004b09 	.word	0x08004b09
 80048c0:	08004b09 	.word	0x08004b09
 80048c4:	08004b09 	.word	0x08004b09
 80048c8:	08004b09 	.word	0x08004b09
 80048cc:	08004b09 	.word	0x08004b09
 80048d0:	08004b09 	.word	0x08004b09
 80048d4:	0800490b 	.word	0x0800490b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048d8:	4b90      	ldr	r3, [pc, #576]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048e4:	4b8d      	ldr	r3, [pc, #564]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	08db      	lsrs	r3, r3, #3
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	4a8c      	ldr	r2, [pc, #560]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
 80048f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80048f6:	e10a      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80048f8:	4b89      	ldr	r3, [pc, #548]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80048fa:	61bb      	str	r3, [r7, #24]
    break;
 80048fc:	e107      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80048fe:	4b89      	ldr	r3, [pc, #548]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004900:	61bb      	str	r3, [r7, #24]
    break;
 8004902:	e104      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004904:	4b88      	ldr	r3, [pc, #544]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004906:	61bb      	str	r3, [r7, #24]
    break;
 8004908:	e101      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800490a:	4b84      	ldr	r3, [pc, #528]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004914:	4b81      	ldr	r3, [pc, #516]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800491e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004920:	4b7e      	ldr	r3, [pc, #504]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800492a:	4b7c      	ldr	r3, [pc, #496]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	08db      	lsrs	r3, r3, #3
 8004930:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004942:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80da 	beq.w	8004b02 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2b01      	cmp	r3, #1
 8004952:	d05a      	beq.n	8004a0a <HAL_RCC_GetSysClockFreq+0x1b2>
 8004954:	2b01      	cmp	r3, #1
 8004956:	d302      	bcc.n	800495e <HAL_RCC_GetSysClockFreq+0x106>
 8004958:	2b02      	cmp	r3, #2
 800495a:	d078      	beq.n	8004a4e <HAL_RCC_GetSysClockFreq+0x1f6>
 800495c:	e099      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800495e:	4b6f      	ldr	r3, [pc, #444]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d02d      	beq.n	80049c6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800496a:	4b6c      	ldr	r3, [pc, #432]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	08db      	lsrs	r3, r3, #3
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	4a6a      	ldr	r2, [pc, #424]	; (8004b20 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004976:	fa22 f303 	lsr.w	r3, r2, r3
 800497a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004990:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004994:	4b61      	ldr	r3, [pc, #388]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80049a8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004b2c <HAL_RCC_GetSysClockFreq+0x2d4>
 80049ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80049c4:	e087      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	ee07 3a90 	vmov	s15, r3
 80049cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004b30 <HAL_RCC_GetSysClockFreq+0x2d8>
 80049d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d8:	4b50      	ldr	r3, [pc, #320]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ec:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004b2c <HAL_RCC_GetSysClockFreq+0x2d4>
 80049f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a08:	e065      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	ee07 3a90 	vmov	s15, r3
 8004a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a14:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004b34 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004a18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1c:	4b3f      	ldr	r3, [pc, #252]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a30:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004b2c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004a34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4c:	e043      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	ee07 3a90 	vmov	s15, r3
 8004a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a58:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004b38 <HAL_RCC_GetSysClockFreq+0x2e0>
 8004a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a60:	4b2e      	ldr	r3, [pc, #184]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a70:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a74:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004b2c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a90:	e021      	b.n	8004ad6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004b34 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004aa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa4:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aac:	ee07 3a90 	vmov	s15, r3
 8004ab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ab8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004b2c <HAL_RCC_GetSysClockFreq+0x2d4>
 8004abc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	0a5b      	lsrs	r3, r3, #9
 8004adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afa:	ee17 3a90 	vmov	r3, s15
 8004afe:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004b00:	e005      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	61bb      	str	r3, [r7, #24]
    break;
 8004b06:	e002      	b.n	8004b0e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004b0a:	61bb      	str	r3, [r7, #24]
    break;
 8004b0c:	bf00      	nop
  }

  return sysclockfreq;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3724      	adds	r7, #36	; 0x24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	58024400 	.word	0x58024400
 8004b20:	03d09000 	.word	0x03d09000
 8004b24:	003d0900 	.word	0x003d0900
 8004b28:	017d7840 	.word	0x017d7840
 8004b2c:	46000000 	.word	0x46000000
 8004b30:	4c742400 	.word	0x4c742400
 8004b34:	4a742400 	.word	0x4a742400
 8004b38:	4bbebc20 	.word	0x4bbebc20

08004b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b40:	f001 fd68 	bl	8006614 <HAL_RCCEx_GetD1SysClockFreq>
 8004b44:	4601      	mov	r1, r0
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	4a07      	ldr	r2, [pc, #28]	; (8004b6c <HAL_RCC_GetHCLKFreq+0x30>)
 8004b50:	5cd3      	ldrb	r3, [r2, r3]
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	fa21 f303 	lsr.w	r3, r1, r3
 8004b5a:	4a05      	ldr	r2, [pc, #20]	; (8004b70 <HAL_RCC_GetHCLKFreq+0x34>)
 8004b5c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (HAL_RCCEx_GetD1SysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif
  return SystemD2Clock;
 8004b5e:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <HAL_RCC_GetHCLKFreq+0x34>)
 8004b60:	681b      	ldr	r3, [r3, #0]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	58024400 	.word	0x58024400
 8004b6c:	08007aa8 	.word	0x08007aa8
 8004b70:	24000004 	.word	0x24000004

08004b74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b80:	2300      	movs	r3, #0
 8004b82:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d03d      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b98:	d013      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b9e:	d802      	bhi.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004ba4:	e01f      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004ba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004baa:	d013      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004bac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bb0:	d01c      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004bb2:	e018      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb4:	4baf      	ldr	r3, [pc, #700]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	4aae      	ldr	r2, [pc, #696]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004bc0:	e015      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fd3f 	bl	800664c <RCCEx_PLL2_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004bd2:	e00c      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3324      	adds	r3, #36	; 0x24
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fde8 	bl	80067b0 <RCCEx_PLL3_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004be4:	e003      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bea:	e000      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004bf4:	4b9f      	ldr	r3, [pc, #636]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c00:	499c      	ldr	r1, [pc, #624]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	650b      	str	r3, [r1, #80]	; 0x50
 8004c06:	e001      	b.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d03d      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d826      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c3d 	.word	0x08004c3d
 8004c2c:	08004c4b 	.word	0x08004c4b
 8004c30:	08004c5d 	.word	0x08004c5d
 8004c34:	08004c75 	.word	0x08004c75
 8004c38:	08004c75 	.word	0x08004c75
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3c:	4b8d      	ldr	r3, [pc, #564]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4a8c      	ldr	r2, [pc, #560]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c48:	e015      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f001 fcfb 	bl	800664c <RCCEx_PLL2_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c5a:	e00c      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3324      	adds	r3, #36	; 0x24
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 fda4 	bl	80067b0 <RCCEx_PLL3_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c6c:	e003      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
      break;
 8004c72:	e000      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c7c:	4b7d      	ldr	r3, [pc, #500]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	f023 0207 	bic.w	r2, r3, #7
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	497a      	ldr	r1, [pc, #488]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c8e:	e001      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c90:	7dfb      	ldrb	r3, [r7, #23]
 8004c92:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d03e      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	2b80      	cmp	r3, #128	; 0x80
 8004ca6:	d01c      	beq.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004ca8:	2b80      	cmp	r3, #128	; 0x80
 8004caa:	d804      	bhi.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004cb0:	2b40      	cmp	r3, #64	; 0x40
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004cb4:	e01e      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8004cb8:	d01f      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cbe:	d01e      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cc0:	e018      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc2:	4b6c      	ldr	r3, [pc, #432]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	4a6b      	ldr	r2, [pc, #428]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004cce:	e017      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f001 fcb8 	bl	800664c <RCCEx_PLL2_Config>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ce0:	e00e      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	3324      	adds	r3, #36	; 0x24
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f001 fd61 	bl	80067b0 <RCCEx_PLL3_Config>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004cf2:	e005      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf8:	e002      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d06:	4b5b      	ldr	r3, [pc, #364]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d12:	4958      	ldr	r1, [pc, #352]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	650b      	str	r3, [r1, #80]	; 0x50
 8004d18:	e001      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1a:	7dfb      	ldrb	r3, [r7, #23]
 8004d1c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d044      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d34:	d01f      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3a:	d805      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004d40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d44:	d00e      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004d46:	e01f      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004d48:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d4c:	d01f      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004d4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d52:	d01e      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004d54:	e018      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d56:	4b47      	ldr	r3, [pc, #284]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	4a46      	ldr	r2, [pc, #280]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d62:	e017      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	3304      	adds	r3, #4
 8004d68:	2100      	movs	r1, #0
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 fc6e 	bl	800664c <RCCEx_PLL2_Config>
 8004d70:	4603      	mov	r3, r0
 8004d72:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004d74:	e00e      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3324      	adds	r3, #36	; 0x24
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f001 fd17 	bl	80067b0 <RCCEx_PLL3_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d86:	e005      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8c:	e002      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004d8e:	bf00      	nop
 8004d90:	e000      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10a      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004d9a:	4b36      	ldr	r3, [pc, #216]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004da8:	4932      	ldr	r1, [pc, #200]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	658b      	str	r3, [r1, #88]	; 0x58
 8004dae:	e001      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d044      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004dc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dca:	d01f      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dd0:	d805      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004dd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004dda:	d00e      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004ddc:	e01f      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004dde:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004de2:	d01f      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004de4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de8:	d01e      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004dea:	e018      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dec:	4b21      	ldr	r3, [pc, #132]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004df8:	e017      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fc23 	bl	800664c <RCCEx_PLL2_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e0a:	e00e      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3324      	adds	r3, #36	; 0x24
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f001 fccc 	bl	80067b0 <RCCEx_PLL3_Config>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e1c:	e005      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	75fb      	strb	r3, [r7, #23]
      break;
 8004e22:	e002      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004e24:	bf00      	nop
 8004e26:	e000      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e3e:	490d      	ldr	r1, [pc, #52]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	658b      	str	r3, [r1, #88]	; 0x58
 8004e44:	e001      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d035      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d00c      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004e5e:	2b10      	cmp	r3, #16
 8004e60:	d802      	bhi.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01b      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004e66:	e017      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004e68:	2b20      	cmp	r3, #32
 8004e6a:	d00c      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004e6c:	2b30      	cmp	r3, #48	; 0x30
 8004e6e:	d018      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004e70:	e012      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004e72:	bf00      	nop
 8004e74:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e78:	4baf      	ldr	r3, [pc, #700]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	4aae      	ldr	r2, [pc, #696]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004e84:	e00e      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f001 fbdd 	bl	800664c <RCCEx_PLL2_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004e96:	e005      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9c:	e002      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004e9e:	bf00      	nop
 8004ea0:	e000      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d109      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004eaa:	4ba3      	ldr	r3, [pc, #652]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb6:	49a0      	ldr	r1, [pc, #640]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ebc:	e001      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebe:	7dfb      	ldrb	r3, [r7, #23]
 8004ec0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d042      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed6:	d01f      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004edc:	d805      	bhi.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	d00e      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004ee8:	e01f      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004eea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eee:	d01f      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef4:	d01e      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004ef6:	e018      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef8:	4b8f      	ldr	r3, [pc, #572]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	4a8e      	ldr	r2, [pc, #568]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f04:	e017      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f001 fb9d 	bl	800664c <RCCEx_PLL2_Config>
 8004f12:	4603      	mov	r3, r0
 8004f14:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f16:	e00e      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3324      	adds	r3, #36	; 0x24
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 fc46 	bl	80067b0 <RCCEx_PLL3_Config>
 8004f24:	4603      	mov	r3, r0
 8004f26:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f28:	e005      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f2e:	e002      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004f30:	bf00      	nop
 8004f32:	e000      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004f34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004f3c:	4b7e      	ldr	r3, [pc, #504]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f40:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f48:	497b      	ldr	r1, [pc, #492]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	650b      	str	r3, [r1, #80]	; 0x50
 8004f4e:	e001      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
 8004f52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d042      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f68:	d01b      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004f6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f6e:	d805      	bhi.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d022      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f78:	d00a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004f7a:	e01b      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004f7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f80:	d01d      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004f82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f86:	d01c      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004f88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f8c:	d01b      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004f8e:	e011      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	2101      	movs	r1, #1
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 fb58 	bl	800664c <RCCEx_PLL2_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004fa0:	e012      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3324      	adds	r3, #36	; 0x24
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f001 fc01 	bl	80067b0 <RCCEx_PLL3_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004fb2:	e009      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb8:	e006      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e004      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e002      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8004fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004fce:	4b5a      	ldr	r3, [pc, #360]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fda:	4957      	ldr	r1, [pc, #348]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	650b      	str	r3, [r1, #80]	; 0x50
 8004fe0:	e001      	b.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe2:	7dfb      	ldrb	r3, [r7, #23]
 8004fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d044      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ffc:	d01b      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004ffe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005002:	d805      	bhi.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8005004:	2b00      	cmp	r3, #0
 8005006:	d022      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005008:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800500e:	e01b      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005014:	d01d      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005016:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800501a:	d01c      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800501c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005020:	d01b      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8005022:	e011      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	3304      	adds	r3, #4
 8005028:	2101      	movs	r1, #1
 800502a:	4618      	mov	r0, r3
 800502c:	f001 fb0e 	bl	800664c <RCCEx_PLL2_Config>
 8005030:	4603      	mov	r3, r0
 8005032:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005034:	e012      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	3324      	adds	r3, #36	; 0x24
 800503a:	2101      	movs	r1, #1
 800503c:	4618      	mov	r0, r3
 800503e:	f001 fbb7 	bl	80067b0 <RCCEx_PLL3_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005046:	e009      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	e006      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800504e:	bf00      	nop
 8005050:	e004      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005052:	bf00      	nop
 8005054:	e002      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005056:	bf00      	nop
 8005058:	e000      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800505a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005062:	4b35      	ldr	r3, [pc, #212]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005066:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005070:	4931      	ldr	r1, [pc, #196]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	658b      	str	r3, [r1, #88]	; 0x58
 8005076:	e001      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d02d      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800508c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005090:	d005      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005096:	d009      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d013      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800509c:	e00f      	b.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a2:	4a25      	ldr	r2, [pc, #148]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80050aa:	e00c      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	2101      	movs	r1, #1
 80050b2:	4618      	mov	r0, r3
 80050b4:	f001 faca 	bl	800664c <RCCEx_PLL2_Config>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80050bc:	e003      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	75fb      	strb	r3, [r7, #23]
      break;
 80050c2:	e000      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80050c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c6:	7dfb      	ldrb	r3, [r7, #23]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050cc:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d8:	4917      	ldr	r1, [pc, #92]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	650b      	str	r3, [r1, #80]	; 0x50
 80050de:	e001      	b.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d035      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	d81b      	bhi.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80050f8:	a201      	add	r2, pc, #4	; (adr r2, 8005100 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	0800513d 	.word	0x0800513d
 8005104:	08005111 	.word	0x08005111
 8005108:	0800511f 	.word	0x0800511f
 800510c:	0800513d 	.word	0x0800513d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005110:	4b09      	ldr	r3, [pc, #36]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	4a08      	ldr	r2, [pc, #32]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005116:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800511a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800511c:	e00f      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	3304      	adds	r3, #4
 8005122:	2102      	movs	r1, #2
 8005124:	4618      	mov	r0, r3
 8005126:	f001 fa91 	bl	800664c <RCCEx_PLL2_Config>
 800512a:	4603      	mov	r3, r0
 800512c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800512e:	e006      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	75fb      	strb	r3, [r7, #23]
      break;
 8005134:	e003      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005136:	bf00      	nop
 8005138:	58024400 	.word	0x58024400
      break;
 800513c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005144:	4bba      	ldr	r3, [pc, #744]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005148:	f023 0203 	bic.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	49b7      	ldr	r1, [pc, #732]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005156:	e001      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 8086 	beq.w	8005276 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800516a:	4bb2      	ldr	r3, [pc, #712]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4ab1      	ldr	r2, [pc, #708]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005170:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005174:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005176:	f7fc fd5f 	bl	8001c38 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800517c:	e009      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517e:	f7fc fd5b 	bl	8001c38 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b64      	cmp	r3, #100	; 0x64
 800518a:	d902      	bls.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	75fb      	strb	r3, [r7, #23]
        break;
 8005190:	e005      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005192:	4ba8      	ldr	r3, [pc, #672]	; (8005434 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ef      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800519e:	7dfb      	ldrb	r3, [r7, #23]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d166      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80051a4:	4ba2      	ldr	r3, [pc, #648]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051ae:	4053      	eors	r3, r2
 80051b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d013      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051b8:	4b9d      	ldr	r3, [pc, #628]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80051c2:	4b9b      	ldr	r3, [pc, #620]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	4a9a      	ldr	r2, [pc, #616]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051cc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051ce:	4b98      	ldr	r3, [pc, #608]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	4a97      	ldr	r2, [pc, #604]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051d8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80051da:	4a95      	ldr	r2, [pc, #596]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ea:	d115      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fc fd24 	bl	8001c38 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80051f2:	e00b      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f4:	f7fc fd20 	bl	8001c38 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005202:	4293      	cmp	r3, r2
 8005204:	d902      	bls.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	75fb      	strb	r3, [r7, #23]
            break;
 800520a:	e005      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800520c:	4b88      	ldr	r3, [pc, #544]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800520e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0ed      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005218:	7dfb      	ldrb	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d126      	bne.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800522c:	d10d      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800522e:	4b80      	ldr	r3, [pc, #512]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800523c:	0919      	lsrs	r1, r3, #4
 800523e:	4b7e      	ldr	r3, [pc, #504]	; (8005438 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005240:	400b      	ands	r3, r1
 8005242:	497b      	ldr	r1, [pc, #492]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005244:	4313      	orrs	r3, r2
 8005246:	610b      	str	r3, [r1, #16]
 8005248:	e005      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800524a:	4b79      	ldr	r3, [pc, #484]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	4a78      	ldr	r2, [pc, #480]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005250:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005254:	6113      	str	r3, [r2, #16]
 8005256:	4b76      	ldr	r3, [pc, #472]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005258:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005264:	4972      	ldr	r1, [pc, #456]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005266:	4313      	orrs	r3, r2
 8005268:	670b      	str	r3, [r1, #112]	; 0x70
 800526a:	e004      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800526c:	7dfb      	ldrb	r3, [r7, #23]
 800526e:	75bb      	strb	r3, [r7, #22]
 8005270:	e001      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0301 	and.w	r3, r3, #1
 800527e:	2b00      	cmp	r3, #0
 8005280:	d07d      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005286:	2b28      	cmp	r3, #40	; 0x28
 8005288:	d866      	bhi.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800528a:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	0800535f 	.word	0x0800535f
 8005294:	08005359 	.word	0x08005359
 8005298:	08005359 	.word	0x08005359
 800529c:	08005359 	.word	0x08005359
 80052a0:	08005359 	.word	0x08005359
 80052a4:	08005359 	.word	0x08005359
 80052a8:	08005359 	.word	0x08005359
 80052ac:	08005359 	.word	0x08005359
 80052b0:	08005335 	.word	0x08005335
 80052b4:	08005359 	.word	0x08005359
 80052b8:	08005359 	.word	0x08005359
 80052bc:	08005359 	.word	0x08005359
 80052c0:	08005359 	.word	0x08005359
 80052c4:	08005359 	.word	0x08005359
 80052c8:	08005359 	.word	0x08005359
 80052cc:	08005359 	.word	0x08005359
 80052d0:	08005347 	.word	0x08005347
 80052d4:	08005359 	.word	0x08005359
 80052d8:	08005359 	.word	0x08005359
 80052dc:	08005359 	.word	0x08005359
 80052e0:	08005359 	.word	0x08005359
 80052e4:	08005359 	.word	0x08005359
 80052e8:	08005359 	.word	0x08005359
 80052ec:	08005359 	.word	0x08005359
 80052f0:	0800535f 	.word	0x0800535f
 80052f4:	08005359 	.word	0x08005359
 80052f8:	08005359 	.word	0x08005359
 80052fc:	08005359 	.word	0x08005359
 8005300:	08005359 	.word	0x08005359
 8005304:	08005359 	.word	0x08005359
 8005308:	08005359 	.word	0x08005359
 800530c:	08005359 	.word	0x08005359
 8005310:	0800535f 	.word	0x0800535f
 8005314:	08005359 	.word	0x08005359
 8005318:	08005359 	.word	0x08005359
 800531c:	08005359 	.word	0x08005359
 8005320:	08005359 	.word	0x08005359
 8005324:	08005359 	.word	0x08005359
 8005328:	08005359 	.word	0x08005359
 800532c:	08005359 	.word	0x08005359
 8005330:	0800535f 	.word	0x0800535f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	2101      	movs	r1, #1
 800533a:	4618      	mov	r0, r3
 800533c:	f001 f986 	bl	800664c <RCCEx_PLL2_Config>
 8005340:	4603      	mov	r3, r0
 8005342:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005344:	e00c      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3324      	adds	r3, #36	; 0x24
 800534a:	2101      	movs	r1, #1
 800534c:	4618      	mov	r0, r3
 800534e:	f001 fa2f 	bl	80067b0 <RCCEx_PLL3_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005356:	e003      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	75fb      	strb	r3, [r7, #23]
      break;
 800535c:	e000      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800535e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005366:	4b32      	ldr	r3, [pc, #200]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005372:	492f      	ldr	r1, [pc, #188]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	654b      	str	r3, [r1, #84]	; 0x54
 8005378:	e001      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800537a:	7dfb      	ldrb	r3, [r7, #23]
 800537c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d037      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538e:	2b05      	cmp	r3, #5
 8005390:	d820      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	080053db 	.word	0x080053db
 800539c:	080053b1 	.word	0x080053b1
 80053a0:	080053c3 	.word	0x080053c3
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053db 	.word	0x080053db
 80053ac:	080053db 	.word	0x080053db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	2101      	movs	r1, #1
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 f948 	bl	800664c <RCCEx_PLL2_Config>
 80053bc:	4603      	mov	r3, r0
 80053be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80053c0:	e00c      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3324      	adds	r3, #36	; 0x24
 80053c6:	2101      	movs	r1, #1
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 f9f1 	bl	80067b0 <RCCEx_PLL3_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80053d2:	e003      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	75fb      	strb	r3, [r7, #23]
      break;
 80053d8:	e000      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80053da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80053e2:	4b13      	ldr	r3, [pc, #76]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	f023 0207 	bic.w	r2, r3, #7
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ee:	4910      	ldr	r1, [pc, #64]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	654b      	str	r3, [r1, #84]	; 0x54
 80053f4:	e001      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d040      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	2b05      	cmp	r3, #5
 800540e:	d827      	bhi.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005410:	a201      	add	r2, pc, #4	; (adr r2, 8005418 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	08005467 	.word	0x08005467
 800541c:	0800543d 	.word	0x0800543d
 8005420:	0800544f 	.word	0x0800544f
 8005424:	08005467 	.word	0x08005467
 8005428:	08005467 	.word	0x08005467
 800542c:	08005467 	.word	0x08005467
 8005430:	58024400 	.word	0x58024400
 8005434:	58024800 	.word	0x58024800
 8005438:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3304      	adds	r3, #4
 8005440:	2101      	movs	r1, #1
 8005442:	4618      	mov	r0, r3
 8005444:	f001 f902 	bl	800664c <RCCEx_PLL2_Config>
 8005448:	4603      	mov	r3, r0
 800544a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800544c:	e00c      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	3324      	adds	r3, #36	; 0x24
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f001 f9ab 	bl	80067b0 <RCCEx_PLL3_Config>
 800545a:	4603      	mov	r3, r0
 800545c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800545e:	e003      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
      break;
 8005464:	e000      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8005466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800546e:	4bb2      	ldr	r3, [pc, #712]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	f023 0207 	bic.w	r2, r3, #7
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547c:	49ae      	ldr	r1, [pc, #696]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800547e:	4313      	orrs	r3, r2
 8005480:	658b      	str	r3, [r1, #88]	; 0x58
 8005482:	e001      	b.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
 8005486:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0320 	and.w	r3, r3, #32
 8005490:	2b00      	cmp	r3, #0
 8005492:	d044      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800549a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800549e:	d01b      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80054a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a4:	d805      	bhi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d022      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80054aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ae:	d00a      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80054b0:	e01b      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x976>
 80054b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b6:	d01d      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80054b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054bc:	d01c      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80054be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054c2:	d01b      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x988>
 80054c4:	e011      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3304      	adds	r3, #4
 80054ca:	2100      	movs	r1, #0
 80054cc:	4618      	mov	r0, r3
 80054ce:	f001 f8bd 	bl	800664c <RCCEx_PLL2_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80054d6:	e012      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3324      	adds	r3, #36	; 0x24
 80054dc:	2102      	movs	r1, #2
 80054de:	4618      	mov	r0, r3
 80054e0:	f001 f966 	bl	80067b0 <RCCEx_PLL3_Config>
 80054e4:	4603      	mov	r3, r0
 80054e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80054e8:	e009      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	75fb      	strb	r3, [r7, #23]
      break;
 80054ee:	e006      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80054f0:	bf00      	nop
 80054f2:	e004      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80054f4:	bf00      	nop
 80054f6:	e002      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80054f8:	bf00      	nop
 80054fa:	e000      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80054fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005504:	4b8c      	ldr	r3, [pc, #560]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005508:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005512:	4989      	ldr	r1, [pc, #548]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005514:	4313      	orrs	r3, r2
 8005516:	654b      	str	r3, [r1, #84]	; 0x54
 8005518:	e001      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551a:	7dfb      	ldrb	r3, [r7, #23]
 800551c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d044      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005534:	d01b      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8005536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800553a:	d805      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d022      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005544:	d00a      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005546:	e01b      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800554c:	d01d      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800554e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005552:	d01c      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005554:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005558:	d01b      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800555a:	e011      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f001 f872 	bl	800664c <RCCEx_PLL2_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800556c:	e012      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	3324      	adds	r3, #36	; 0x24
 8005572:	2102      	movs	r1, #2
 8005574:	4618      	mov	r0, r3
 8005576:	f001 f91b 	bl	80067b0 <RCCEx_PLL3_Config>
 800557a:	4603      	mov	r3, r0
 800557c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800557e:	e009      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	75fb      	strb	r3, [r7, #23]
      break;
 8005584:	e006      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005586:	bf00      	nop
 8005588:	e004      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800558a:	bf00      	nop
 800558c:	e002      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800558e:	bf00      	nop
 8005590:	e000      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005594:	7dfb      	ldrb	r3, [r7, #23]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800559a:	4b67      	ldr	r3, [pc, #412]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055a8:	4963      	ldr	r1, [pc, #396]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	658b      	str	r3, [r1, #88]	; 0x58
 80055ae:	e001      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b0:	7dfb      	ldrb	r3, [r7, #23]
 80055b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d044      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055ca:	d01b      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80055cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d0:	d805      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d022      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80055dc:	e01b      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80055de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e2:	d01d      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80055e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80055e8:	d01c      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80055ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80055ee:	d01b      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80055f0:	e011      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3304      	adds	r3, #4
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f001 f827 	bl	800664c <RCCEx_PLL2_Config>
 80055fe:	4603      	mov	r3, r0
 8005600:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005602:	e012      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3324      	adds	r3, #36	; 0x24
 8005608:	2102      	movs	r1, #2
 800560a:	4618      	mov	r0, r3
 800560c:	f001 f8d0 	bl	80067b0 <RCCEx_PLL3_Config>
 8005610:	4603      	mov	r3, r0
 8005612:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005614:	e009      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	75fb      	strb	r3, [r7, #23]
      break;
 800561a:	e006      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800561c:	bf00      	nop
 800561e:	e004      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005620:	bf00      	nop
 8005622:	e002      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005624:	bf00      	nop
 8005626:	e000      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10a      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005630:	4b41      	ldr	r3, [pc, #260]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800563e:	493e      	ldr	r1, [pc, #248]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005640:	4313      	orrs	r3, r2
 8005642:	658b      	str	r3, [r1, #88]	; 0x58
 8005644:	e001      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005646:	7dfb      	ldrb	r3, [r7, #23]
 8005648:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800565c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005660:	d10a      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3324      	adds	r3, #36	; 0x24
 8005666:	2102      	movs	r1, #2
 8005668:	4618      	mov	r0, r3
 800566a:	f001 f8a1 	bl	80067b0 <RCCEx_PLL3_Config>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005678:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800567a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005686:	492c      	ldr	r1, [pc, #176]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005688:	4313      	orrs	r3, r2
 800568a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01a      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800569e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a2:	d10a      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	3324      	adds	r3, #36	; 0x24
 80056a8:	2102      	movs	r1, #2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f001 f880 	bl	80067b0 <RCCEx_PLL3_Config>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056ba:	4b1f      	ldr	r3, [pc, #124]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056c8:	491b      	ldr	r1, [pc, #108]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d032      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e4:	d00d      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80056e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ea:	d016      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d111      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	2100      	movs	r1, #0
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 ffa8 	bl	800664c <RCCEx_PLL2_Config>
 80056fc:	4603      	mov	r3, r0
 80056fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005700:	e00c      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	3324      	adds	r3, #36	; 0x24
 8005706:	2102      	movs	r1, #2
 8005708:	4618      	mov	r0, r3
 800570a:	f001 f851 	bl	80067b0 <RCCEx_PLL3_Config>
 800570e:	4603      	mov	r3, r0
 8005710:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005712:	e003      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	75fb      	strb	r3, [r7, #23]
      break;
 8005718:	e000      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800571a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800571c:	7dfb      	ldrb	r3, [r7, #23]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10c      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005726:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005730:	4901      	ldr	r1, [pc, #4]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005732:	4313      	orrs	r3, r2
 8005734:	658b      	str	r3, [r1, #88]	; 0x58
 8005736:	e003      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02f      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005756:	d00c      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800575c:	d015      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800575e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005762:	d10f      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005764:	4b71      	ldr	r3, [pc, #452]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4a70      	ldr	r2, [pc, #448]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800576a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800576e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005770:	e00c      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3324      	adds	r3, #36	; 0x24
 8005776:	2101      	movs	r1, #1
 8005778:	4618      	mov	r0, r3
 800577a:	f001 f819 	bl	80067b0 <RCCEx_PLL3_Config>
 800577e:	4603      	mov	r3, r0
 8005780:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005782:	e003      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	75fb      	strb	r3, [r7, #23]
      break;
 8005788:	e000      	b.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800578a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800578c:	7dfb      	ldrb	r3, [r7, #23]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10a      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005792:	4b66      	ldr	r3, [pc, #408]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005796:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a0:	4962      	ldr	r1, [pc, #392]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	654b      	str	r3, [r1, #84]	; 0x54
 80057a6:	e001      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
 80057aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d029      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c4:	d007      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80057c6:	e00f      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c8:	4b58      	ldr	r3, [pc, #352]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	4a57      	ldr	r2, [pc, #348]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80057d4:	e00b      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3304      	adds	r3, #4
 80057da:	2102      	movs	r1, #2
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 ff35 	bl	800664c <RCCEx_PLL2_Config>
 80057e2:	4603      	mov	r3, r0
 80057e4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80057e6:	e002      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	75fb      	strb	r3, [r7, #23]
      break;
 80057ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80057f4:	4b4d      	ldr	r3, [pc, #308]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80057f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005800:	494a      	ldr	r1, [pc, #296]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005802:	4313      	orrs	r3, r2
 8005804:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005806:	e001      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005808:	7dfb      	ldrb	r3, [r7, #23]
 800580a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3324      	adds	r3, #36	; 0x24
 800581c:	2102      	movs	r1, #2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 ffc6 	bl	80067b0 <RCCEx_PLL3_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d02f      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005842:	d00c      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005848:	d802      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d011      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800584e:	e00d      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005854:	d00f      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800585a:	d00e      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800585c:	e006      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800585e:	4b33      	ldr	r3, [pc, #204]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	4a32      	ldr	r2, [pc, #200]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005868:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800586a:	e007      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	75fb      	strb	r3, [r7, #23]
      break;
 8005870:	e004      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005872:	bf00      	nop
 8005874:	e002      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005876:	bf00      	nop
 8005878:	e000      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800587a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800587c:	7dfb      	ldrb	r3, [r7, #23]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005882:	4b2a      	ldr	r3, [pc, #168]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800588e:	4927      	ldr	r1, [pc, #156]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005890:	4313      	orrs	r3, r2
 8005892:	654b      	str	r3, [r1, #84]	; 0x54
 8005894:	e001      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
 8005898:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d008      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80058a6:	4b21      	ldr	r3, [pc, #132]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	491e      	ldr	r1, [pc, #120]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058c4:	4b19      	ldr	r3, [pc, #100]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058d0:	4916      	ldr	r1, [pc, #88]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00d      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	4a11      	ldr	r2, [pc, #68]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058ec:	6113      	str	r3, [r2, #16]
 80058ee:	4b0f      	ldr	r3, [pc, #60]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058f0:	691a      	ldr	r2, [r3, #16]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80058f8:	490c      	ldr	r1, [pc, #48]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	da08      	bge.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005906:	4b09      	ldr	r3, [pc, #36]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005912:	4906      	ldr	r1, [pc, #24]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005914:	4313      	orrs	r3, r2
 8005916:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005918:	7dbb      	ldrb	r3, [r7, #22]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 800591e:	2300      	movs	r3, #0
 8005920:	e000      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	58024400 	.word	0x58024400

08005930 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b090      	sub	sp, #64	; 0x40
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593e:	d150      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005940:	4ba1      	ldr	r3, [pc, #644]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	2b04      	cmp	r3, #4
 800594e:	d844      	bhi.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800596d 	.word	0x0800596d
 800595c:	0800597d 	.word	0x0800597d
 8005960:	0800598d 	.word	0x0800598d
 8005964:	080059d5 	.word	0x080059d5
 8005968:	0800599d 	.word	0x0800599d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800596c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005970:	4618      	mov	r0, r3
 8005972:	f000 fd03 	bl	800637c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800597a:	e241      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800597c:	f107 0318 	add.w	r3, r7, #24
 8005980:	4618      	mov	r0, r3
 8005982:	f000 fa63 	bl	8005e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800598a:	e239      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800598c:	f107 030c 	add.w	r3, r7, #12
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fba7 	bl	80060e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800599a:	e231      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800599c:	4b8a      	ldr	r3, [pc, #552]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800599e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80059ac:	4b87      	ldr	r3, [pc, #540]	; (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80059b0:	e226      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80059b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059b8:	d102      	bne.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 80059ba:	4b85      	ldr	r3, [pc, #532]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059be:	e21f      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c6:	d102      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 80059c8:	4b82      	ldr	r3, [pc, #520]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059cc:	e218      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059d2:	e215      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80059d4:	4b80      	ldr	r3, [pc, #512]	; (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059d8:	e212      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059de:	bf00      	nop
 80059e0:	e20e      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e8:	d14f      	bne.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80059ea:	4b77      	ldr	r3, [pc, #476]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80059ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ee:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80059f2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	2b80      	cmp	r3, #128	; 0x80
 80059f8:	d01c      	beq.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80059fa:	2b80      	cmp	r3, #128	; 0x80
 80059fc:	d804      	bhi.n	8005a08 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8005a02:	2b40      	cmp	r3, #64	; 0x40
 8005a04:	d00e      	beq.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005a06:	e03c      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005a08:	2bc0      	cmp	r3, #192	; 0xc0
 8005a0a:	d037      	beq.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a10:	d018      	beq.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005a12:	e036      	b.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fcaf 	bl	800637c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a22:	e1ed      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a24:	f107 0318 	add.w	r3, r7, #24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fa0f 	bl	8005e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a32:	e1e5      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a34:	f107 030c 	add.w	r3, r7, #12
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fb53 	bl	80060e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a42:	e1dd      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a44:	4b60      	ldr	r3, [pc, #384]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d102      	bne.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005a54:	4b5d      	ldr	r3, [pc, #372]	; (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005a56:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005a58:	e1d2      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a60:	d102      	bne.n	8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8005a62:	4b5b      	ldr	r3, [pc, #364]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005a64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a66:	e1cb      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a6e:	d102      	bne.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005a70:	4b58      	ldr	r3, [pc, #352]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005a72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a74:	e1c4      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a7a:	e1c1      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a7c:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a80:	e1be      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a86:	bf00      	nop
 8005a88:	e1ba      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a90:	d153      	bne.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005a92:	4b4d      	ldr	r3, [pc, #308]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a96:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005a9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa2:	d01f      	beq.n	8005ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa8:	d805      	bhi.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005aae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ab2:	d00f      	beq.n	8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005ab4:	e03d      	b.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005ab6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005aba:	d037      	beq.n	8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005abc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ac0:	d018      	beq.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005ac2:	e036      	b.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fc57 	bl	800637c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad2:	e195      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ad4:	f107 0318 	add.w	r3, r7, #24
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 f9b7 	bl	8005e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ae2:	e18d      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ae4:	f107 030c 	add.w	r3, r7, #12
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fafb 	bl	80060e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af2:	e185      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005af4:	4b34      	ldr	r3, [pc, #208]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d102      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005b04:	4b31      	ldr	r3, [pc, #196]	; (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b06:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005b08:	e17a      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b10:	d102      	bne.n	8005b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8005b12:	4b2f      	ldr	r3, [pc, #188]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b16:	e173      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b1e:	d102      	bne.n	8005b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005b20:	4b2c      	ldr	r3, [pc, #176]	; (8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b24:	e16c      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005b26:	2300      	movs	r3, #0
 8005b28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b2a:	e169      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b2c:	4b2a      	ldr	r3, [pc, #168]	; (8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b30:	e166      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b36:	bf00      	nop
 8005b38:	e162      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b40:	d15d      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005b42:	4b21      	ldr	r3, [pc, #132]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b46:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b52:	d01f      	beq.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b58:	d805      	bhi.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005b5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b62:	d00f      	beq.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005b64:	e047      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005b66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b6a:	d041      	beq.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b70:	d018      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005b72:	e040      	b.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fbff 	bl	800637c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b82:	e13d      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b84:	f107 0318 	add.w	r3, r7, #24
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f000 f95f 	bl	8005e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b92:	e135      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b94:	f107 030c 	add.w	r3, r7, #12
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 faa3 	bl	80060e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ba2:	e12d      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ba4:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d102      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005bb4:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005bb8:	e122      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8005bc2:	4b03      	ldr	r3, [pc, #12]	; (8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bc6:	e11b      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005bc8:	58024400 	.word	0x58024400
 8005bcc:	03d09000 	.word	0x03d09000
 8005bd0:	003d0900 	.word	0x003d0900
 8005bd4:	017d7840 	.word	0x017d7840
 8005bd8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005be2:	d102      	bne.n	8005bea <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8005be4:	4b89      	ldr	r3, [pc, #548]	; (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005be6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005be8:	e10a      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bee:	e107      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bf0:	4b87      	ldr	r3, [pc, #540]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bf4:	e104      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bfa:	bf00      	nop
 8005bfc:	e100      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c04:	d153      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005c06:	4b83      	ldr	r3, [pc, #524]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005c0e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c16:	d01f      	beq.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c1c:	d805      	bhi.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c26:	d00f      	beq.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005c28:	e03d      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005c2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c2e:	d037      	beq.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c34:	d018      	beq.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005c36:	e036      	b.n	8005ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 fb9d 	bl	800637c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c46:	e0db      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c48:	f107 0318 	add.w	r3, r7, #24
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 f8fd 	bl	8005e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c56:	e0d3      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c58:	f107 030c 	add.w	r3, r7, #12
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fa41 	bl	80060e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c66:	e0cb      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c68:	4b6a      	ldr	r3, [pc, #424]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d102      	bne.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005c78:	4b67      	ldr	r3, [pc, #412]	; (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005c7c:	e0c0      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c84:	d102      	bne.n	8005c8c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8005c86:	4b65      	ldr	r3, [pc, #404]	; (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005c88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c8a:	e0b9      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c92:	d102      	bne.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8005c94:	4b5d      	ldr	r3, [pc, #372]	; (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005c96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c98:	e0b2      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c9e:	e0af      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ca0:	4b5b      	ldr	r3, [pc, #364]	; (8005e10 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ca4:	e0ac      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005caa:	bf00      	nop
 8005cac:	e0a8      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005cb4:	d13d      	bne.n	8005d32 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005cb6:	4b57      	ldr	r3, [pc, #348]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cbe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc6:	d00c      	beq.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ccc:	d011      	beq.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d12b      	bne.n	8005d2a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cd2:	f107 0318 	add.w	r3, r7, #24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 f8b8 	bl	8005e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ce0:	e08e      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ce2:	f107 030c 	add.w	r3, r7, #12
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f9fc 	bl	80060e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cf0:	e086      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005cf2:	4b48      	ldr	r3, [pc, #288]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cfa:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d102      	bne.n	8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005d02:	4b45      	ldr	r3, [pc, #276]	; (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005d04:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005d06:	e07b      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d0e:	d102      	bne.n	8005d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005d10:	4b42      	ldr	r3, [pc, #264]	; (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005d12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d14:	e074      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d1c:	d102      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8005d1e:	4b3b      	ldr	r3, [pc, #236]	; (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d22:	e06d      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005d24:	2300      	movs	r3, #0
 8005d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d28:	e06a      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d2e:	bf00      	nop
 8005d30:	e066      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d38:	d11f      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005d3a:	4b36      	ldr	r3, [pc, #216]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d42:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4e:	d008      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005d50:	e00f      	b.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 fb10 	bl	800637c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d60:	e04e      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d62:	f107 0318 	add.w	r3, r7, #24
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f870 	bl	8005e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d70:	e046      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d76:	bf00      	nop
 8005d78:	e042      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d80:	d13c      	bne.n	8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005d82:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d86:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005d8a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d92:	d01e      	beq.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8005d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d98:	d805      	bhi.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00d      	beq.n	8005dba <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005da2:	d00e      	beq.n	8005dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8005da4:	e026      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8005da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005daa:	d01d      	beq.n	8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005db0:	d01d      	beq.n	8005dee <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005db2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005db6:	d014      	beq.n	8005de2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8005db8:	e01c      	b.n	8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005dba:	f000 f831 	bl	8005e20 <HAL_RCCEx_GetD3PCLK1Freq>
 8005dbe:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005dc0:	e01e      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dc2:	f107 0318 	add.w	r3, r7, #24
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f840 	bl	8005e4c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dd0:	e016      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dd2:	f107 030c 	add.w	r3, r7, #12
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f984 	bl	80060e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005de0:	e00e      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005de4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005de6:	e00b      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005de8:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005dea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dec:	e008      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8005dee:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005df0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005df2:	e005      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005df4:	2300      	movs	r3, #0
 8005df6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005df8:	bf00      	nop
 8005dfa:	e001      	b.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3740      	adds	r7, #64	; 0x40
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	017d7840 	.word	0x017d7840
 8005e10:	00bb8000 	.word	0x00bb8000
 8005e14:	58024400 	.word	0x58024400
 8005e18:	03d09000 	.word	0x03d09000
 8005e1c:	003d0900 	.word	0x003d0900

08005e20 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005e24:	f7fe fe8a 	bl	8004b3c <HAL_RCC_GetHCLKFreq>
 8005e28:	4601      	mov	r1, r0
 8005e2a:	4b06      	ldr	r3, [pc, #24]	; (8005e44 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	091b      	lsrs	r3, r3, #4
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	4a04      	ldr	r2, [pc, #16]	; (8005e48 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005e36:	5cd3      	ldrb	r3, [r2, r3]
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	58024400 	.word	0x58024400
 8005e48:	08007aa8 	.word	0x08007aa8

08005e4c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b089      	sub	sp, #36	; 0x24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e54:	4b9d      	ldr	r3, [pc, #628]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005e5e:	4b9b      	ldr	r3, [pc, #620]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e62:	0b1b      	lsrs	r3, r3, #12
 8005e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e68:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005e6a:	4b98      	ldr	r3, [pc, #608]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6e:	091b      	lsrs	r3, r3, #4
 8005e70:	f003 0301 	and.w	r3, r3, #1
 8005e74:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005e76:	4b95      	ldr	r3, [pc, #596]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e7a:	08db      	lsrs	r3, r3, #3
 8005e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 810a 	beq.w	80060ae <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d05a      	beq.n	8005f56 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d302      	bcc.n	8005eaa <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d078      	beq.n	8005f9a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005ea8:	e099      	b.n	8005fde <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005eaa:	4b88      	ldr	r3, [pc, #544]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d02d      	beq.n	8005f12 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005eb6:	4b85      	ldr	r3, [pc, #532]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	08db      	lsrs	r3, r3, #3
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	4a83      	ldr	r2, [pc, #524]	; (80060d0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ee0:	4b7a      	ldr	r3, [pc, #488]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee8:	ee07 3a90 	vmov	s15, r3
 8005eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ef4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f10:	e087      	b.n	8006022 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	ee07 3a90 	vmov	s15, r3
 8005f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80060d8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f24:	4b69      	ldr	r3, [pc, #420]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f34:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f38:	eddf 5a66 	vldr	s11, [pc, #408]	; 80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f54:	e065      	b.n	8006022 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f60:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80060dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f68:	4b58      	ldr	r3, [pc, #352]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f98:	e043      	b.n	8006022 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fac:	4b47      	ldr	r3, [pc, #284]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb4:	ee07 3a90 	vmov	s15, r3
 8005fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005fc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fdc:	e021      	b.n	8006022 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80060dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005fec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff0:	4b36      	ldr	r3, [pc, #216]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff8:	ee07 3a90 	vmov	s15, r3
 8005ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006000:	ed97 6a03 	vldr	s12, [r7, #12]
 8006004:	eddf 5a33 	vldr	s11, [pc, #204]	; 80060d4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006020:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006022:	4b2a      	ldr	r3, [pc, #168]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	0a5b      	lsrs	r3, r3, #9
 8006028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800603c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006048:	ee17 2a90 	vmov	r2, s15
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006050:	4b1e      	ldr	r3, [pc, #120]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006066:	ee37 7a87 	vadd.f32	s14, s15, s14
 800606a:	edd7 6a07 	vldr	s13, [r7, #28]
 800606e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006076:	ee17 2a90 	vmov	r2, s15
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800607e:	4b13      	ldr	r3, [pc, #76]	; (80060cc <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	0e1b      	lsrs	r3, r3, #24
 8006084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006094:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006098:	edd7 6a07 	vldr	s13, [r7, #28]
 800609c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060a4:	ee17 2a90 	vmov	r2, s15
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80060ac:	e008      	b.n	80060c0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	609a      	str	r2, [r3, #8]
}
 80060c0:	bf00      	nop
 80060c2:	3724      	adds	r7, #36	; 0x24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	58024400 	.word	0x58024400
 80060d0:	03d09000 	.word	0x03d09000
 80060d4:	46000000 	.word	0x46000000
 80060d8:	4c742400 	.word	0x4c742400
 80060dc:	4a742400 	.word	0x4a742400
 80060e0:	4bbebc20 	.word	0x4bbebc20

080060e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b089      	sub	sp, #36	; 0x24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80060ec:	4b9d      	ldr	r3, [pc, #628]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	f003 0303 	and.w	r3, r3, #3
 80060f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80060f6:	4b9b      	ldr	r3, [pc, #620]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fa:	0d1b      	lsrs	r3, r3, #20
 80060fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006100:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006102:	4b98      	ldr	r3, [pc, #608]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	0a1b      	lsrs	r3, r3, #8
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800610e:	4b95      	ldr	r3, [pc, #596]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006112:	08db      	lsrs	r3, r3, #3
 8006114:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	fb02 f303 	mul.w	r3, r2, r3
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 810a 	beq.w	8006346 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d05a      	beq.n	80061ee <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006138:	2b01      	cmp	r3, #1
 800613a:	d302      	bcc.n	8006142 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800613c:	2b02      	cmp	r3, #2
 800613e:	d078      	beq.n	8006232 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006140:	e099      	b.n	8006276 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006142:	4b88      	ldr	r3, [pc, #544]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0320 	and.w	r3, r3, #32
 800614a:	2b00      	cmp	r3, #0
 800614c:	d02d      	beq.n	80061aa <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800614e:	4b85      	ldr	r3, [pc, #532]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	08db      	lsrs	r3, r3, #3
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	4a83      	ldr	r2, [pc, #524]	; (8006368 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800615a:	fa22 f303 	lsr.w	r3, r2, r3
 800615e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	ee07 3a90 	vmov	s15, r3
 8006170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006178:	4b7a      	ldr	r3, [pc, #488]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006180:	ee07 3a90 	vmov	s15, r3
 8006184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006188:	ed97 6a03 	vldr	s12, [r7, #12]
 800618c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800636c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800619c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80061a8:	e087      	b.n	80062ba <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006370 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80061b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061bc:	4b69      	ldr	r3, [pc, #420]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c4:	ee07 3a90 	vmov	s15, r3
 80061c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800636c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80061d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061ec:	e065      	b.n	80062ba <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	ee07 3a90 	vmov	s15, r3
 80061f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80061fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006200:	4b58      	ldr	r3, [pc, #352]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006208:	ee07 3a90 	vmov	s15, r3
 800620c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006210:	ed97 6a03 	vldr	s12, [r7, #12]
 8006214:	eddf 5a55 	vldr	s11, [pc, #340]	; 800636c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800621c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800622c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006230:	e043      	b.n	80062ba <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	ee07 3a90 	vmov	s15, r3
 8006238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006378 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006244:	4b47      	ldr	r3, [pc, #284]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800624c:	ee07 3a90 	vmov	s15, r3
 8006250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006254:	ed97 6a03 	vldr	s12, [r7, #12]
 8006258:	eddf 5a44 	vldr	s11, [pc, #272]	; 800636c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800625c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800626c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006270:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006274:	e021      	b.n	80062ba <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	ee07 3a90 	vmov	s15, r3
 800627c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006280:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006374 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006288:	4b36      	ldr	r3, [pc, #216]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800628a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006298:	ed97 6a03 	vldr	s12, [r7, #12]
 800629c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800636c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80062a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062b8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80062ba:	4b2a      	ldr	r3, [pc, #168]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	0a5b      	lsrs	r3, r3, #9
 80062c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80062d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062e0:	ee17 2a90 	vmov	r2, s15
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80062e8:	4b1e      	ldr	r3, [pc, #120]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ec:	0c1b      	lsrs	r3, r3, #16
 80062ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80062fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006302:	edd7 6a07 	vldr	s13, [r7, #28]
 8006306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800630a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800630e:	ee17 2a90 	vmov	r2, s15
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006316:	4b13      	ldr	r3, [pc, #76]	; (8006364 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631a:	0e1b      	lsrs	r3, r3, #24
 800631c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006320:	ee07 3a90 	vmov	s15, r3
 8006324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800632c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006330:	edd7 6a07 	vldr	s13, [r7, #28]
 8006334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800633c:	ee17 2a90 	vmov	r2, s15
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006344:	e008      	b.n	8006358 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	609a      	str	r2, [r3, #8]
}
 8006358:	bf00      	nop
 800635a:	3724      	adds	r7, #36	; 0x24
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	58024400 	.word	0x58024400
 8006368:	03d09000 	.word	0x03d09000
 800636c:	46000000 	.word	0x46000000
 8006370:	4c742400 	.word	0x4c742400
 8006374:	4a742400 	.word	0x4a742400
 8006378:	4bbebc20 	.word	0x4bbebc20

0800637c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800637c:	b480      	push	{r7}
 800637e:	b089      	sub	sp, #36	; 0x24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006384:	4b9d      	ldr	r3, [pc, #628]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	f003 0303 	and.w	r3, r3, #3
 800638c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800638e:	4b9b      	ldr	r3, [pc, #620]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	091b      	lsrs	r3, r3, #4
 8006394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006398:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800639a:	4b98      	ldr	r3, [pc, #608]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800639c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063a4:	4b95      	ldr	r3, [pc, #596]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80063a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a8:	08db      	lsrs	r3, r3, #3
 80063aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	fb02 f303 	mul.w	r3, r2, r3
 80063b4:	ee07 3a90 	vmov	s15, r3
 80063b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 810a 	beq.w	80065dc <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d05a      	beq.n	8006484 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d302      	bcc.n	80063d8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d078      	beq.n	80064c8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 80063d6:	e099      	b.n	800650c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d8:	4b88      	ldr	r3, [pc, #544]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02d      	beq.n	8006440 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063e4:	4b85      	ldr	r3, [pc, #532]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	08db      	lsrs	r3, r3, #3
 80063ea:	f003 0303 	and.w	r3, r3, #3
 80063ee:	4a84      	ldr	r2, [pc, #528]	; (8006600 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
 80063f4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	ee07 3a90 	vmov	s15, r3
 80063fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640e:	4b7b      	ldr	r3, [pc, #492]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800641e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006422:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006604 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800642a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800642e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800643e:	e087      	b.n	8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006608 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800644e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006452:	4b6a      	ldr	r3, [pc, #424]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006462:	ed97 6a03 	vldr	s12, [r7, #12]
 8006466:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006604 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800646a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800646e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800647a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006482:	e065      	b.n	8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800660c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006496:	4b59      	ldr	r3, [pc, #356]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80064aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006604 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80064ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064c6:	e043      	b.n	8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006610 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80064d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064da:	4b48      	ldr	r3, [pc, #288]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80064ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006604 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80064f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006506:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800650a:	e021      	b.n	8006550 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006516:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800660c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800651a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651e:	4b37      	ldr	r3, [pc, #220]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006532:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006604 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8006536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800653a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800654a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800654e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006550:	4b2a      	ldr	r3, [pc, #168]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	0a5b      	lsrs	r3, r3, #9
 8006556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006566:	ee37 7a87 	vadd.f32	s14, s15, s14
 800656a:	edd7 6a07 	vldr	s13, [r7, #28]
 800656e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006572:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006576:	ee17 2a90 	vmov	r2, s15
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800657e:	4b1f      	ldr	r3, [pc, #124]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	0c1b      	lsrs	r3, r3, #16
 8006584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006598:	edd7 6a07 	vldr	s13, [r7, #28]
 800659c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a4:	ee17 2a90 	vmov	r2, s15
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80065ac:	4b13      	ldr	r3, [pc, #76]	; (80065fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	0e1b      	lsrs	r3, r3, #24
 80065b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065d2:	ee17 2a90 	vmov	r2, s15
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80065da:	e008      	b.n	80065ee <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	609a      	str	r2, [r3, #8]
}
 80065ee:	bf00      	nop
 80065f0:	3724      	adds	r7, #36	; 0x24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	58024400 	.word	0x58024400
 8006600:	03d09000 	.word	0x03d09000
 8006604:	46000000 	.word	0x46000000
 8006608:	4c742400 	.word	0x4c742400
 800660c:	4a742400 	.word	0x4a742400
 8006610:	4bbebc20 	.word	0x4bbebc20

08006614 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006618:	f7fe f91e 	bl	8004858 <HAL_RCC_GetSysClockFreq>
 800661c:	4601      	mov	r1, r0
 800661e:	4b08      	ldr	r3, [pc, #32]	; (8006640 <HAL_RCCEx_GetD1SysClockFreq+0x2c>)
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	0a1b      	lsrs	r3, r3, #8
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	4a06      	ldr	r2, [pc, #24]	; (8006644 <HAL_RCCEx_GetD1SysClockFreq+0x30>)
 800662a:	5cd3      	ldrb	r3, [r2, r3]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	fa21 f303 	lsr.w	r3, r1, r3
 8006634:	4a04      	ldr	r2, [pc, #16]	; (8006648 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 8006636:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif
  return SystemCoreClock;
 8006638:	4b03      	ldr	r3, [pc, #12]	; (8006648 <HAL_RCCEx_GetD1SysClockFreq+0x34>)
 800663a:	681b      	ldr	r3, [r3, #0]
}
 800663c:	4618      	mov	r0, r3
 800663e:	bd80      	pop	{r7, pc}
 8006640:	58024400 	.word	0x58024400
 8006644:	08007aa8 	.word	0x08007aa8
 8006648:	24000000 	.word	0x24000000

0800664c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800665a:	4b53      	ldr	r3, [pc, #332]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	2b03      	cmp	r3, #3
 8006664:	d101      	bne.n	800666a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e099      	b.n	800679e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800666a:	4b4f      	ldr	r3, [pc, #316]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a4e      	ldr	r2, [pc, #312]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006670:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006676:	f7fb fadf 	bl	8001c38 <HAL_GetTick>
 800667a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800667c:	e008      	b.n	8006690 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800667e:	f7fb fadb 	bl	8001c38 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e086      	b.n	800679e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006690:	4b45      	ldr	r3, [pc, #276]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1f0      	bne.n	800667e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800669c:	4b42      	ldr	r3, [pc, #264]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 800669e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	031b      	lsls	r3, r3, #12
 80066aa:	493f      	ldr	r1, [pc, #252]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	628b      	str	r3, [r1, #40]	; 0x28
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	3b01      	subs	r3, #1
 80066b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	3b01      	subs	r3, #1
 80066c0:	025b      	lsls	r3, r3, #9
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	041b      	lsls	r3, r3, #16
 80066ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	3b01      	subs	r3, #1
 80066da:	061b      	lsls	r3, r3, #24
 80066dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066e0:	4931      	ldr	r1, [pc, #196]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80066e6:	4b30      	ldr	r3, [pc, #192]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	492d      	ldr	r1, [pc, #180]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80066f8:	4b2b      	ldr	r3, [pc, #172]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	f023 0220 	bic.w	r2, r3, #32
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	4928      	ldr	r1, [pc, #160]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006706:	4313      	orrs	r3, r2
 8006708:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800670a:	4b27      	ldr	r3, [pc, #156]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	4a26      	ldr	r2, [pc, #152]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006710:	f023 0310 	bic.w	r3, r3, #16
 8006714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006716:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800671a:	4b24      	ldr	r3, [pc, #144]	; (80067ac <RCCEx_PLL2_Config+0x160>)
 800671c:	4013      	ands	r3, r2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	69d2      	ldr	r2, [r2, #28]
 8006722:	00d2      	lsls	r2, r2, #3
 8006724:	4920      	ldr	r1, [pc, #128]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006726:	4313      	orrs	r3, r2
 8006728:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800672a:	4b1f      	ldr	r3, [pc, #124]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006730:	f043 0310 	orr.w	r3, r3, #16
 8006734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d106      	bne.n	800674a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800673c:	4b1a      	ldr	r3, [pc, #104]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	4a19      	ldr	r2, [pc, #100]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006742:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006746:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006748:	e00f      	b.n	800676a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d106      	bne.n	800675e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006750:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a14      	ldr	r2, [pc, #80]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800675a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800675c:	e005      	b.n	800676a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800675e:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	4a11      	ldr	r2, [pc, #68]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006764:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006768:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800676a:	4b0f      	ldr	r3, [pc, #60]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a0e      	ldr	r2, [pc, #56]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006770:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006776:	f7fb fa5f 	bl	8001c38 <HAL_GetTick>
 800677a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800677c:	e008      	b.n	8006790 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800677e:	f7fb fa5b 	bl	8001c38 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e006      	b.n	800679e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <RCCEx_PLL2_Config+0x15c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	58024400 	.word	0x58024400
 80067ac:	ffff0007 	.word	0xffff0007

080067b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067be:	4b53      	ldr	r3, [pc, #332]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d101      	bne.n	80067ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e099      	b.n	8006902 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80067ce:	4b4f      	ldr	r3, [pc, #316]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a4e      	ldr	r2, [pc, #312]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80067d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067da:	f7fb fa2d 	bl	8001c38 <HAL_GetTick>
 80067de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067e0:	e008      	b.n	80067f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80067e2:	f7fb fa29 	bl	8001c38 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d901      	bls.n	80067f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e086      	b.n	8006902 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067f4:	4b45      	ldr	r3, [pc, #276]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1f0      	bne.n	80067e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006800:	4b42      	ldr	r3, [pc, #264]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 8006802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006804:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	051b      	lsls	r3, r3, #20
 800680e:	493f      	ldr	r1, [pc, #252]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 8006810:	4313      	orrs	r3, r2
 8006812:	628b      	str	r3, [r1, #40]	; 0x28
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	3b01      	subs	r3, #1
 800681a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	3b01      	subs	r3, #1
 8006824:	025b      	lsls	r3, r3, #9
 8006826:	b29b      	uxth	r3, r3
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	3b01      	subs	r3, #1
 8006830:	041b      	lsls	r3, r3, #16
 8006832:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	3b01      	subs	r3, #1
 800683e:	061b      	lsls	r3, r3, #24
 8006840:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006844:	4931      	ldr	r1, [pc, #196]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 8006846:	4313      	orrs	r3, r2
 8006848:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800684a:	4b30      	ldr	r3, [pc, #192]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 800684c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	492d      	ldr	r1, [pc, #180]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 8006858:	4313      	orrs	r3, r2
 800685a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800685c:	4b2b      	ldr	r3, [pc, #172]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	4928      	ldr	r1, [pc, #160]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 800686a:	4313      	orrs	r3, r2
 800686c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800686e:	4b27      	ldr	r3, [pc, #156]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	4a26      	ldr	r2, [pc, #152]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 8006874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006878:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800687a:	4b24      	ldr	r3, [pc, #144]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 800687c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800687e:	4b24      	ldr	r3, [pc, #144]	; (8006910 <RCCEx_PLL3_Config+0x160>)
 8006880:	4013      	ands	r3, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	69d2      	ldr	r2, [r2, #28]
 8006886:	00d2      	lsls	r2, r2, #3
 8006888:	4920      	ldr	r1, [pc, #128]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 800688a:	4313      	orrs	r3, r2
 800688c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800688e:	4b1f      	ldr	r3, [pc, #124]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	4a1e      	ldr	r2, [pc, #120]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 8006894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006898:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d106      	bne.n	80068ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80068a0:	4b1a      	ldr	r3, [pc, #104]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	4a19      	ldr	r2, [pc, #100]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80068a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068ac:	e00f      	b.n	80068ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d106      	bne.n	80068c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80068b4:	4b15      	ldr	r3, [pc, #84]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	4a14      	ldr	r2, [pc, #80]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80068ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80068be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068c0:	e005      	b.n	80068ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80068c2:	4b12      	ldr	r3, [pc, #72]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80068c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068c6:	4a11      	ldr	r2, [pc, #68]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80068c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a0e      	ldr	r2, [pc, #56]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80068d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068da:	f7fb f9ad 	bl	8001c38 <HAL_GetTick>
 80068de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068e0:	e008      	b.n	80068f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80068e2:	f7fb f9a9 	bl	8001c38 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d901      	bls.n	80068f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e006      	b.n	8006902 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <RCCEx_PLL3_Config+0x15c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0f0      	beq.n	80068e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	58024400 	.word	0x58024400
 8006910:	ffff0007 	.word	0xffff0007

08006914 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d101      	bne.n	800692a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e0e2      	b.n	8006af0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a70      	ldr	r2, [pc, #448]	; (8006af8 <HAL_SPI_Init+0x1e4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d00f      	beq.n	800695a <HAL_SPI_Init+0x46>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a6f      	ldr	r2, [pc, #444]	; (8006afc <HAL_SPI_Init+0x1e8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d00a      	beq.n	800695a <HAL_SPI_Init+0x46>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a6d      	ldr	r2, [pc, #436]	; (8006b00 <HAL_SPI_Init+0x1ec>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d005      	beq.n	800695a <HAL_SPI_Init+0x46>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	2b0f      	cmp	r3, #15
 8006954:	d901      	bls.n	800695a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e0ca      	b.n	8006af0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f8d2 	bl	8006b04 <SPI_GetPacketSize>
 8006960:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a64      	ldr	r2, [pc, #400]	; (8006af8 <HAL_SPI_Init+0x1e4>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00c      	beq.n	8006986 <HAL_SPI_Init+0x72>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a62      	ldr	r2, [pc, #392]	; (8006afc <HAL_SPI_Init+0x1e8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <HAL_SPI_Init+0x72>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a61      	ldr	r2, [pc, #388]	; (8006b00 <HAL_SPI_Init+0x1ec>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d002      	beq.n	8006986 <HAL_SPI_Init+0x72>
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	2b08      	cmp	r3, #8
 8006984:	d811      	bhi.n	80069aa <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800698a:	4a5b      	ldr	r2, [pc, #364]	; (8006af8 <HAL_SPI_Init+0x1e4>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d009      	beq.n	80069a4 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a59      	ldr	r2, [pc, #356]	; (8006afc <HAL_SPI_Init+0x1e8>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d004      	beq.n	80069a4 <HAL_SPI_Init+0x90>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a58      	ldr	r2, [pc, #352]	; (8006b00 <HAL_SPI_Init+0x1ec>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d104      	bne.n	80069ae <HAL_SPI_Init+0x9a>
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	2b10      	cmp	r3, #16
 80069a8:	d901      	bls.n	80069ae <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e0a0      	b.n	8006af0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d106      	bne.n	80069c8 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fa fe56 	bl	8001674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069e8:	d110      	bne.n	8006a0c <HAL_SPI_Init+0xf8>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069f2:	d10b      	bne.n	8006a0c <HAL_SPI_Init+0xf8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d107      	bne.n	8006a0c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a0a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a14:	431a      	orrs	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1e:	ea42 0103 	orr.w	r1, r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	431a      	orrs	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	431a      	orrs	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6c:	ea42 0103 	orr.w	r1, r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d113      	bne.n	8006aac <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a96:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006aaa:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0201 	bic.w	r2, r2, #1
 8006aba:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00a      	beq.n	8006ade <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	430a      	orrs	r2, r1
 8006adc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40013000 	.word	0x40013000
 8006afc:	40003800 	.word	0x40003800
 8006b00:	40003c00 	.word	0x40003c00

08006b04 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b10:	095b      	lsrs	r3, r3, #5
 8006b12:	3301      	adds	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	3307      	adds	r3, #7
 8006b22:	08db      	lsrs	r3, r3, #3
 8006b24:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	68fa      	ldr	r2, [r7, #12]
 8006b2a:	fb02 f303 	mul.w	r3, r2, r3
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b082      	sub	sp, #8
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e01d      	b.n	8006b88 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7fa fdf3 	bl	800174c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	3304      	adds	r3, #4
 8006b76:	4619      	mov	r1, r3
 8006b78:	4610      	mov	r0, r2
 8006b7a:	f000 faa9 	bl	80070d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <HAL_TIM_Base_Start+0x50>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b06      	cmp	r3, #6
 8006bb0:	d00b      	beq.n	8006bca <HAL_TIM_Base_Start+0x3a>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb8:	d007      	beq.n	8006bca <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0201 	orr.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	00010007 	.word	0x00010007

08006be4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e01d      	b.n	8006c32 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 f815 	bl	8006c3a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	4619      	mov	r1, r3
 8006c22:	4610      	mov	r0, r2
 8006c24:	f000 fa54 	bl	80070d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
	...

08006c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fe3a 	bl	80078dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1e      	ldr	r2, [pc, #120]	; (8006ce8 <HAL_TIM_PWM_Start+0x98>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d013      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x4a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <HAL_TIM_PWM_Start+0x9c>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d00e      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x4a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a1b      	ldr	r2, [pc, #108]	; (8006cf0 <HAL_TIM_PWM_Start+0xa0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d009      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x4a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1a      	ldr	r2, [pc, #104]	; (8006cf4 <HAL_TIM_PWM_Start+0xa4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d004      	beq.n	8006c9a <HAL_TIM_PWM_Start+0x4a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a18      	ldr	r2, [pc, #96]	; (8006cf8 <HAL_TIM_PWM_Start+0xa8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d101      	bne.n	8006c9e <HAL_TIM_PWM_Start+0x4e>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <HAL_TIM_PWM_Start+0x50>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d007      	beq.n	8006cb4 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <HAL_TIM_PWM_Start+0xac>)
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2b06      	cmp	r3, #6
 8006cc4:	d00b      	beq.n	8006cde <HAL_TIM_PWM_Start+0x8e>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ccc:	d007      	beq.n	8006cde <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0201 	orr.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40010000 	.word	0x40010000
 8006cec:	40010400 	.word	0x40010400
 8006cf0:	40014000 	.word	0x40014000
 8006cf4:	40014400 	.word	0x40014400
 8006cf8:	40014800 	.word	0x40014800
 8006cfc:	00010007 	.word	0x00010007

08006d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e105      	b.n	8006f26 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b14      	cmp	r3, #20
 8006d2e:	f200 80f0 	bhi.w	8006f12 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006d32:	a201      	add	r2, pc, #4	; (adr r2, 8006d38 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d38:	08006d8d 	.word	0x08006d8d
 8006d3c:	08006f13 	.word	0x08006f13
 8006d40:	08006f13 	.word	0x08006f13
 8006d44:	08006f13 	.word	0x08006f13
 8006d48:	08006dcd 	.word	0x08006dcd
 8006d4c:	08006f13 	.word	0x08006f13
 8006d50:	08006f13 	.word	0x08006f13
 8006d54:	08006f13 	.word	0x08006f13
 8006d58:	08006e0f 	.word	0x08006e0f
 8006d5c:	08006f13 	.word	0x08006f13
 8006d60:	08006f13 	.word	0x08006f13
 8006d64:	08006f13 	.word	0x08006f13
 8006d68:	08006e4f 	.word	0x08006e4f
 8006d6c:	08006f13 	.word	0x08006f13
 8006d70:	08006f13 	.word	0x08006f13
 8006d74:	08006f13 	.word	0x08006f13
 8006d78:	08006e91 	.word	0x08006e91
 8006d7c:	08006f13 	.word	0x08006f13
 8006d80:	08006f13 	.word	0x08006f13
 8006d84:	08006f13 	.word	0x08006f13
 8006d88:	08006ed1 	.word	0x08006ed1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 fa36 	bl	8007204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	699a      	ldr	r2, [r3, #24]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0208 	orr.w	r2, r2, #8
 8006da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f022 0204 	bic.w	r2, r2, #4
 8006db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6999      	ldr	r1, [r3, #24]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	691a      	ldr	r2, [r3, #16]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	619a      	str	r2, [r3, #24]
      break;
 8006dca:	e0a3      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68b9      	ldr	r1, [r7, #8]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 faa6 	bl	8007324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699a      	ldr	r2, [r3, #24]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699a      	ldr	r2, [r3, #24]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6999      	ldr	r1, [r3, #24]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	021a      	lsls	r2, r3, #8
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	619a      	str	r2, [r3, #24]
      break;
 8006e0c:	e082      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fb0f 	bl	8007438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69da      	ldr	r2, [r3, #28]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0208 	orr.w	r2, r2, #8
 8006e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69da      	ldr	r2, [r3, #28]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0204 	bic.w	r2, r2, #4
 8006e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69d9      	ldr	r1, [r3, #28]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	61da      	str	r2, [r3, #28]
      break;
 8006e4c:	e062      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	68b9      	ldr	r1, [r7, #8]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fb75 	bl	8007544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	69da      	ldr	r2, [r3, #28]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	69da      	ldr	r2, [r3, #28]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69d9      	ldr	r1, [r3, #28]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	021a      	lsls	r2, r3, #8
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	61da      	str	r2, [r3, #28]
      break;
 8006e8e:	e041      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fbbc 	bl	8007614 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f042 0208 	orr.w	r2, r2, #8
 8006eaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0204 	bic.w	r2, r2, #4
 8006eba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	691a      	ldr	r2, [r3, #16]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ece:	e021      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fbfe 	bl	80076d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006eea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	021a      	lsls	r2, r3, #8
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006f10:	e000      	b.n	8006f14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006f12:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop

08006f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIM_ConfigClockSource+0x18>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e0b7      	b.n	80070b8 <HAL_TIM_ConfigClockSource+0x188>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2202      	movs	r2, #2
 8006f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	4b57      	ldr	r3, [pc, #348]	; (80070c0 <HAL_TIM_ConfigClockSource+0x190>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2b70      	cmp	r3, #112	; 0x70
 8006f7e:	d02e      	beq.n	8006fde <HAL_TIM_ConfigClockSource+0xae>
 8006f80:	2b70      	cmp	r3, #112	; 0x70
 8006f82:	d812      	bhi.n	8006faa <HAL_TIM_ConfigClockSource+0x7a>
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	f000 8084 	beq.w	8007092 <HAL_TIM_ConfigClockSource+0x162>
 8006f8a:	2b30      	cmp	r3, #48	; 0x30
 8006f8c:	d806      	bhi.n	8006f9c <HAL_TIM_ConfigClockSource+0x6c>
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d07f      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x162>
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	d07d      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x162>
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d07b      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006f9a:	e084      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8006f9c:	2b50      	cmp	r3, #80	; 0x50
 8006f9e:	d048      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x102>
 8006fa0:	2b60      	cmp	r3, #96	; 0x60
 8006fa2:	d056      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x122>
 8006fa4:	2b40      	cmp	r3, #64	; 0x40
 8006fa6:	d064      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8006fa8:	e07d      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8006faa:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006fae:	d070      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x162>
 8006fb0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006fb4:	d809      	bhi.n	8006fca <HAL_TIM_ConfigClockSource+0x9a>
 8006fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fba:	d027      	beq.n	800700c <HAL_TIM_ConfigClockSource+0xdc>
 8006fbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fc0:	d067      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x162>
 8006fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc6:	d06d      	beq.n	80070a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fc8:	e06d      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8006fca:	4a3e      	ldr	r2, [pc, #248]	; (80070c4 <HAL_TIM_ConfigClockSource+0x194>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d060      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x162>
 8006fd0:	4a3d      	ldr	r2, [pc, #244]	; (80070c8 <HAL_TIM_ConfigClockSource+0x198>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d05d      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x162>
 8006fd6:	4a3d      	ldr	r2, [pc, #244]	; (80070cc <HAL_TIM_ConfigClockSource+0x19c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d05a      	beq.n	8007092 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8006fdc:	e063      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6818      	ldr	r0, [r3, #0]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	6899      	ldr	r1, [r3, #8]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	f000 fc55 	bl	800789c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007000:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	609a      	str	r2, [r3, #8]
      break;
 800700a:	e04c      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6818      	ldr	r0, [r3, #0]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	6899      	ldr	r1, [r3, #8]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	f000 fc3e 	bl	800789c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800702e:	609a      	str	r2, [r3, #8]
      break;
 8007030:	e039      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6818      	ldr	r0, [r3, #0]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6859      	ldr	r1, [r3, #4]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	461a      	mov	r2, r3
 8007040:	f000 fbae 	bl	80077a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2150      	movs	r1, #80	; 0x50
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fc08 	bl	8007860 <TIM_ITRx_SetConfig>
      break;
 8007050:	e029      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	6859      	ldr	r1, [r3, #4]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	461a      	mov	r2, r3
 8007060:	f000 fbcd 	bl	80077fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2160      	movs	r1, #96	; 0x60
 800706a:	4618      	mov	r0, r3
 800706c:	f000 fbf8 	bl	8007860 <TIM_ITRx_SetConfig>
      break;
 8007070:	e019      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6818      	ldr	r0, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	6859      	ldr	r1, [r3, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	461a      	mov	r2, r3
 8007080:	f000 fb8e 	bl	80077a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2140      	movs	r1, #64	; 0x40
 800708a:	4618      	mov	r0, r3
 800708c:	f000 fbe8 	bl	8007860 <TIM_ITRx_SetConfig>
      break;
 8007090:	e009      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4619      	mov	r1, r3
 800709c:	4610      	mov	r0, r2
 800709e:	f000 fbdf 	bl	8007860 <TIM_ITRx_SetConfig>
      break;
 80070a2:	e000      	b.n	80070a6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80070a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	ffceff88 	.word	0xffceff88
 80070c4:	00100030 	.word	0x00100030
 80070c8:	00100040 	.word	0x00100040
 80070cc:	00100020 	.word	0x00100020

080070d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a40      	ldr	r2, [pc, #256]	; (80071e4 <TIM_Base_SetConfig+0x114>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d013      	beq.n	8007110 <TIM_Base_SetConfig+0x40>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ee:	d00f      	beq.n	8007110 <TIM_Base_SetConfig+0x40>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a3d      	ldr	r2, [pc, #244]	; (80071e8 <TIM_Base_SetConfig+0x118>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00b      	beq.n	8007110 <TIM_Base_SetConfig+0x40>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a3c      	ldr	r2, [pc, #240]	; (80071ec <TIM_Base_SetConfig+0x11c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d007      	beq.n	8007110 <TIM_Base_SetConfig+0x40>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a3b      	ldr	r2, [pc, #236]	; (80071f0 <TIM_Base_SetConfig+0x120>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d003      	beq.n	8007110 <TIM_Base_SetConfig+0x40>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a3a      	ldr	r2, [pc, #232]	; (80071f4 <TIM_Base_SetConfig+0x124>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d108      	bne.n	8007122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a2f      	ldr	r2, [pc, #188]	; (80071e4 <TIM_Base_SetConfig+0x114>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01f      	beq.n	800716a <TIM_Base_SetConfig+0x9a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007130:	d01b      	beq.n	800716a <TIM_Base_SetConfig+0x9a>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a2c      	ldr	r2, [pc, #176]	; (80071e8 <TIM_Base_SetConfig+0x118>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d017      	beq.n	800716a <TIM_Base_SetConfig+0x9a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a2b      	ldr	r2, [pc, #172]	; (80071ec <TIM_Base_SetConfig+0x11c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <TIM_Base_SetConfig+0x9a>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a2a      	ldr	r2, [pc, #168]	; (80071f0 <TIM_Base_SetConfig+0x120>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00f      	beq.n	800716a <TIM_Base_SetConfig+0x9a>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a29      	ldr	r2, [pc, #164]	; (80071f4 <TIM_Base_SetConfig+0x124>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00b      	beq.n	800716a <TIM_Base_SetConfig+0x9a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a28      	ldr	r2, [pc, #160]	; (80071f8 <TIM_Base_SetConfig+0x128>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d007      	beq.n	800716a <TIM_Base_SetConfig+0x9a>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a27      	ldr	r2, [pc, #156]	; (80071fc <TIM_Base_SetConfig+0x12c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d003      	beq.n	800716a <TIM_Base_SetConfig+0x9a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a26      	ldr	r2, [pc, #152]	; (8007200 <TIM_Base_SetConfig+0x130>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d108      	bne.n	800717c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a10      	ldr	r2, [pc, #64]	; (80071e4 <TIM_Base_SetConfig+0x114>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00f      	beq.n	80071c8 <TIM_Base_SetConfig+0xf8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a12      	ldr	r2, [pc, #72]	; (80071f4 <TIM_Base_SetConfig+0x124>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00b      	beq.n	80071c8 <TIM_Base_SetConfig+0xf8>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a11      	ldr	r2, [pc, #68]	; (80071f8 <TIM_Base_SetConfig+0x128>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d007      	beq.n	80071c8 <TIM_Base_SetConfig+0xf8>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a10      	ldr	r2, [pc, #64]	; (80071fc <TIM_Base_SetConfig+0x12c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_Base_SetConfig+0xf8>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a0f      	ldr	r2, [pc, #60]	; (8007200 <TIM_Base_SetConfig+0x130>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d103      	bne.n	80071d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	691a      	ldr	r2, [r3, #16]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	615a      	str	r2, [r3, #20]
}
 80071d6:	bf00      	nop
 80071d8:	3714      	adds	r7, #20
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	40010000 	.word	0x40010000
 80071e8:	40000400 	.word	0x40000400
 80071ec:	40000800 	.word	0x40000800
 80071f0:	40000c00 	.word	0x40000c00
 80071f4:	40010400 	.word	0x40010400
 80071f8:	40014000 	.word	0x40014000
 80071fc:	40014400 	.word	0x40014400
 8007200:	40014800 	.word	0x40014800

08007204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f023 0201 	bic.w	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	699b      	ldr	r3, [r3, #24]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4b37      	ldr	r3, [pc, #220]	; (800730c <TIM_OC1_SetConfig+0x108>)
 8007230:	4013      	ands	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f023 0303 	bic.w	r3, r3, #3
 800723a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f023 0302 	bic.w	r3, r3, #2
 800724c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	4313      	orrs	r3, r2
 8007256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a2d      	ldr	r2, [pc, #180]	; (8007310 <TIM_OC1_SetConfig+0x10c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00f      	beq.n	8007280 <TIM_OC1_SetConfig+0x7c>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a2c      	ldr	r2, [pc, #176]	; (8007314 <TIM_OC1_SetConfig+0x110>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00b      	beq.n	8007280 <TIM_OC1_SetConfig+0x7c>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a2b      	ldr	r2, [pc, #172]	; (8007318 <TIM_OC1_SetConfig+0x114>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d007      	beq.n	8007280 <TIM_OC1_SetConfig+0x7c>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a2a      	ldr	r2, [pc, #168]	; (800731c <TIM_OC1_SetConfig+0x118>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d003      	beq.n	8007280 <TIM_OC1_SetConfig+0x7c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a29      	ldr	r2, [pc, #164]	; (8007320 <TIM_OC1_SetConfig+0x11c>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10c      	bne.n	800729a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f023 0308 	bic.w	r3, r3, #8
 8007286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	4313      	orrs	r3, r2
 8007290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f023 0304 	bic.w	r3, r3, #4
 8007298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a1c      	ldr	r2, [pc, #112]	; (8007310 <TIM_OC1_SetConfig+0x10c>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d00f      	beq.n	80072c2 <TIM_OC1_SetConfig+0xbe>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a1b      	ldr	r2, [pc, #108]	; (8007314 <TIM_OC1_SetConfig+0x110>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00b      	beq.n	80072c2 <TIM_OC1_SetConfig+0xbe>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a1a      	ldr	r2, [pc, #104]	; (8007318 <TIM_OC1_SetConfig+0x114>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d007      	beq.n	80072c2 <TIM_OC1_SetConfig+0xbe>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a19      	ldr	r2, [pc, #100]	; (800731c <TIM_OC1_SetConfig+0x118>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d003      	beq.n	80072c2 <TIM_OC1_SetConfig+0xbe>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a18      	ldr	r2, [pc, #96]	; (8007320 <TIM_OC1_SetConfig+0x11c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d111      	bne.n	80072e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	4313      	orrs	r3, r2
 80072da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	621a      	str	r2, [r3, #32]
}
 8007300:	bf00      	nop
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	fffeff8f 	.word	0xfffeff8f
 8007310:	40010000 	.word	0x40010000
 8007314:	40010400 	.word	0x40010400
 8007318:	40014000 	.word	0x40014000
 800731c:	40014400 	.word	0x40014400
 8007320:	40014800 	.word	0x40014800

08007324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	f023 0210 	bic.w	r2, r3, #16
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4b34      	ldr	r3, [pc, #208]	; (8007420 <TIM_OC2_SetConfig+0xfc>)
 8007350:	4013      	ands	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800735a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f023 0320 	bic.w	r3, r3, #32
 800736e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	4313      	orrs	r3, r2
 800737a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a29      	ldr	r2, [pc, #164]	; (8007424 <TIM_OC2_SetConfig+0x100>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d003      	beq.n	800738c <TIM_OC2_SetConfig+0x68>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a28      	ldr	r2, [pc, #160]	; (8007428 <TIM_OC2_SetConfig+0x104>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d10d      	bne.n	80073a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a1e      	ldr	r2, [pc, #120]	; (8007424 <TIM_OC2_SetConfig+0x100>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00f      	beq.n	80073d0 <TIM_OC2_SetConfig+0xac>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <TIM_OC2_SetConfig+0x104>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00b      	beq.n	80073d0 <TIM_OC2_SetConfig+0xac>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a1c      	ldr	r2, [pc, #112]	; (800742c <TIM_OC2_SetConfig+0x108>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d007      	beq.n	80073d0 <TIM_OC2_SetConfig+0xac>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <TIM_OC2_SetConfig+0x10c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d003      	beq.n	80073d0 <TIM_OC2_SetConfig+0xac>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a1a      	ldr	r2, [pc, #104]	; (8007434 <TIM_OC2_SetConfig+0x110>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d113      	bne.n	80073f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	621a      	str	r2, [r3, #32]
}
 8007412:	bf00      	nop
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	feff8fff 	.word	0xfeff8fff
 8007424:	40010000 	.word	0x40010000
 8007428:	40010400 	.word	0x40010400
 800742c:	40014000 	.word	0x40014000
 8007430:	40014400 	.word	0x40014400
 8007434:	40014800 	.word	0x40014800

08007438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6a1b      	ldr	r3, [r3, #32]
 8007446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	69db      	ldr	r3, [r3, #28]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	021b      	lsls	r3, r3, #8
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a27      	ldr	r2, [pc, #156]	; (8007530 <TIM_OC3_SetConfig+0xf8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d003      	beq.n	800749e <TIM_OC3_SetConfig+0x66>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a26      	ldr	r2, [pc, #152]	; (8007534 <TIM_OC3_SetConfig+0xfc>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10d      	bne.n	80074ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	021b      	lsls	r3, r3, #8
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a1c      	ldr	r2, [pc, #112]	; (8007530 <TIM_OC3_SetConfig+0xf8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00f      	beq.n	80074e2 <TIM_OC3_SetConfig+0xaa>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a1b      	ldr	r2, [pc, #108]	; (8007534 <TIM_OC3_SetConfig+0xfc>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00b      	beq.n	80074e2 <TIM_OC3_SetConfig+0xaa>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a1a      	ldr	r2, [pc, #104]	; (8007538 <TIM_OC3_SetConfig+0x100>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d007      	beq.n	80074e2 <TIM_OC3_SetConfig+0xaa>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a19      	ldr	r2, [pc, #100]	; (800753c <TIM_OC3_SetConfig+0x104>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d003      	beq.n	80074e2 <TIM_OC3_SetConfig+0xaa>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a18      	ldr	r2, [pc, #96]	; (8007540 <TIM_OC3_SetConfig+0x108>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d113      	bne.n	800750a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	011b      	lsls	r3, r3, #4
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	621a      	str	r2, [r3, #32]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	40010000 	.word	0x40010000
 8007534:	40010400 	.word	0x40010400
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800

08007544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007544:	b480      	push	{r7}
 8007546:	b087      	sub	sp, #28
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
 800755e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800757a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	021b      	lsls	r3, r3, #8
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	4313      	orrs	r3, r2
 8007586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800758e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	031b      	lsls	r3, r3, #12
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a18      	ldr	r2, [pc, #96]	; (8007600 <TIM_OC4_SetConfig+0xbc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d00f      	beq.n	80075c4 <TIM_OC4_SetConfig+0x80>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a17      	ldr	r2, [pc, #92]	; (8007604 <TIM_OC4_SetConfig+0xc0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d00b      	beq.n	80075c4 <TIM_OC4_SetConfig+0x80>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a16      	ldr	r2, [pc, #88]	; (8007608 <TIM_OC4_SetConfig+0xc4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d007      	beq.n	80075c4 <TIM_OC4_SetConfig+0x80>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	4a15      	ldr	r2, [pc, #84]	; (800760c <TIM_OC4_SetConfig+0xc8>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d003      	beq.n	80075c4 <TIM_OC4_SetConfig+0x80>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a14      	ldr	r2, [pc, #80]	; (8007610 <TIM_OC4_SetConfig+0xcc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d109      	bne.n	80075d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	019b      	lsls	r3, r3, #6
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	621a      	str	r2, [r3, #32]
}
 80075f2:	bf00      	nop
 80075f4:	371c      	adds	r7, #28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	40010000 	.word	0x40010000
 8007604:	40010400 	.word	0x40010400
 8007608:	40014000 	.word	0x40014000
 800760c:	40014400 	.word	0x40014400
 8007610:	40014800 	.word	0x40014800

08007614 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007654:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	041b      	lsls	r3, r3, #16
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a17      	ldr	r2, [pc, #92]	; (80076c4 <TIM_OC5_SetConfig+0xb0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d00f      	beq.n	800768a <TIM_OC5_SetConfig+0x76>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a16      	ldr	r2, [pc, #88]	; (80076c8 <TIM_OC5_SetConfig+0xb4>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d00b      	beq.n	800768a <TIM_OC5_SetConfig+0x76>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <TIM_OC5_SetConfig+0xb8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d007      	beq.n	800768a <TIM_OC5_SetConfig+0x76>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a14      	ldr	r2, [pc, #80]	; (80076d0 <TIM_OC5_SetConfig+0xbc>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d003      	beq.n	800768a <TIM_OC5_SetConfig+0x76>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a13      	ldr	r2, [pc, #76]	; (80076d4 <TIM_OC5_SetConfig+0xc0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d109      	bne.n	800769e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007690:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	621a      	str	r2, [r3, #32]
}
 80076b8:	bf00      	nop
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	40010000 	.word	0x40010000
 80076c8:	40010400 	.word	0x40010400
 80076cc:	40014000 	.word	0x40014000
 80076d0:	40014400 	.word	0x40014400
 80076d4:	40014800 	.word	0x40014800

080076d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	4313      	orrs	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800771a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	051b      	lsls	r3, r3, #20
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a18      	ldr	r2, [pc, #96]	; (800778c <TIM_OC6_SetConfig+0xb4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00f      	beq.n	8007750 <TIM_OC6_SetConfig+0x78>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a17      	ldr	r2, [pc, #92]	; (8007790 <TIM_OC6_SetConfig+0xb8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00b      	beq.n	8007750 <TIM_OC6_SetConfig+0x78>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a16      	ldr	r2, [pc, #88]	; (8007794 <TIM_OC6_SetConfig+0xbc>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d007      	beq.n	8007750 <TIM_OC6_SetConfig+0x78>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a15      	ldr	r2, [pc, #84]	; (8007798 <TIM_OC6_SetConfig+0xc0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d003      	beq.n	8007750 <TIM_OC6_SetConfig+0x78>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a14      	ldr	r2, [pc, #80]	; (800779c <TIM_OC6_SetConfig+0xc4>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d109      	bne.n	8007764 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007756:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	029b      	lsls	r3, r3, #10
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40010000 	.word	0x40010000
 8007790:	40010400 	.word	0x40010400
 8007794:	40014000 	.word	0x40014000
 8007798:	40014400 	.word	0x40014400
 800779c:	40014800 	.word	0x40014800

080077a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	f023 0201 	bic.w	r2, r3, #1
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f023 030a 	bic.w	r3, r3, #10
 80077dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077fe:	b480      	push	{r7}
 8007800:	b087      	sub	sp, #28
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a1b      	ldr	r3, [r3, #32]
 800780e:	f023 0210 	bic.w	r2, r3, #16
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a1b      	ldr	r3, [r3, #32]
 8007820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007828:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	031b      	lsls	r3, r3, #12
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800783a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	621a      	str	r2, [r3, #32]
}
 8007852:	bf00      	nop
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr
	...

08007860 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4b09      	ldr	r3, [pc, #36]	; (8007898 <TIM_ITRx_SetConfig+0x38>)
 8007874:	4013      	ands	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4313      	orrs	r3, r2
 800787e:	f043 0307 	orr.w	r3, r3, #7
 8007882:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	609a      	str	r2, [r3, #8]
}
 800788a:	bf00      	nop
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	ffcfff8f 	.word	0xffcfff8f

0800789c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	021a      	lsls	r2, r3, #8
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	431a      	orrs	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	609a      	str	r2, [r3, #8]
}
 80078d0:	bf00      	nop
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078dc:	b480      	push	{r7}
 80078de:	b087      	sub	sp, #28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f003 031f 	and.w	r3, r3, #31
 80078ee:	2201      	movs	r2, #1
 80078f0:	fa02 f303 	lsl.w	r3, r2, r3
 80078f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a1a      	ldr	r2, [r3, #32]
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	43db      	mvns	r3, r3
 80078fe:	401a      	ands	r2, r3
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	6a1a      	ldr	r2, [r3, #32]
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f003 031f 	and.w	r3, r3, #31
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	fa01 f303 	lsl.w	r3, r1, r3
 8007914:	431a      	orrs	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
	...

08007928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800793c:	2302      	movs	r3, #2
 800793e:	e068      	b.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a2e      	ldr	r2, [pc, #184]	; (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d004      	beq.n	8007974 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a2d      	ldr	r2, [pc, #180]	; (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d108      	bne.n	8007986 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800797a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800798c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4313      	orrs	r3, r2
 8007996:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a1e      	ldr	r2, [pc, #120]	; (8007a20 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d01d      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b2:	d018      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a1b      	ldr	r2, [pc, #108]	; (8007a28 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d013      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a1a      	ldr	r2, [pc, #104]	; (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d00e      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a18      	ldr	r2, [pc, #96]	; (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d009      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a13      	ldr	r2, [pc, #76]	; (8007a24 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d004      	beq.n	80079e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a14      	ldr	r2, [pc, #80]	; (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d10c      	bne.n	8007a00 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40010400 	.word	0x40010400
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40000c00 	.word	0x40000c00
 8007a34:	40001800 	.word	0x40001800

08007a38 <__libc_init_array>:
 8007a38:	b570      	push	{r4, r5, r6, lr}
 8007a3a:	4e0d      	ldr	r6, [pc, #52]	; (8007a70 <__libc_init_array+0x38>)
 8007a3c:	4c0d      	ldr	r4, [pc, #52]	; (8007a74 <__libc_init_array+0x3c>)
 8007a3e:	1ba4      	subs	r4, r4, r6
 8007a40:	10a4      	asrs	r4, r4, #2
 8007a42:	2500      	movs	r5, #0
 8007a44:	42a5      	cmp	r5, r4
 8007a46:	d109      	bne.n	8007a5c <__libc_init_array+0x24>
 8007a48:	4e0b      	ldr	r6, [pc, #44]	; (8007a78 <__libc_init_array+0x40>)
 8007a4a:	4c0c      	ldr	r4, [pc, #48]	; (8007a7c <__libc_init_array+0x44>)
 8007a4c:	f000 f820 	bl	8007a90 <_init>
 8007a50:	1ba4      	subs	r4, r4, r6
 8007a52:	10a4      	asrs	r4, r4, #2
 8007a54:	2500      	movs	r5, #0
 8007a56:	42a5      	cmp	r5, r4
 8007a58:	d105      	bne.n	8007a66 <__libc_init_array+0x2e>
 8007a5a:	bd70      	pop	{r4, r5, r6, pc}
 8007a5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a60:	4798      	blx	r3
 8007a62:	3501      	adds	r5, #1
 8007a64:	e7ee      	b.n	8007a44 <__libc_init_array+0xc>
 8007a66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a6a:	4798      	blx	r3
 8007a6c:	3501      	adds	r5, #1
 8007a6e:	e7f2      	b.n	8007a56 <__libc_init_array+0x1e>
 8007a70:	08007ab8 	.word	0x08007ab8
 8007a74:	08007ab8 	.word	0x08007ab8
 8007a78:	08007ab8 	.word	0x08007ab8
 8007a7c:	08007abc 	.word	0x08007abc

08007a80 <memset>:
 8007a80:	4402      	add	r2, r0
 8007a82:	4603      	mov	r3, r0
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d100      	bne.n	8007a8a <memset+0xa>
 8007a88:	4770      	bx	lr
 8007a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a8e:	e7f9      	b.n	8007a84 <memset+0x4>

08007a90 <_init>:
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	bf00      	nop
 8007a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a96:	bc08      	pop	{r3}
 8007a98:	469e      	mov	lr, r3
 8007a9a:	4770      	bx	lr

08007a9c <_fini>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	bf00      	nop
 8007aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa2:	bc08      	pop	{r3}
 8007aa4:	469e      	mov	lr, r3
 8007aa6:	4770      	bx	lr
